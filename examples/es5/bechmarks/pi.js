"use strict";
"use strict";
var Bluebird = require("bluebird");
var async = Bluebird.coroutine;
var common = require("../common");
var numberOfPoints = 20000000;
var pi = async($traceurRuntime.initGeneratorFunction(function $__0(af, deviceInfo) {
  var AFArray,
      x,
      y,
      dist,
      numInside,
      piVal;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          AFArray = af.AFArray;
          console.log("Calculating pi on device:\n");
          common.printDeviceInfo(deviceInfo);
          console.log("");
          x = af.randu(numberOfPoints, af.dtype.f32);
          y = af.randu(numberOfPoints, af.dtype.f32);
          dist = af.sqrt(x.mul(x).add(y.mul(y)));
          $ctx.state = 6;
          break;
        case 6:
          $ctx.state = 2;
          return af.sumAsync(dist.lt(1));
        case 2:
          numInside = $ctx.sent;
          $ctx.state = 4;
          break;
        case 4:
          piVal = (4.0 * numInside) / numberOfPoints;
          console.log(("PI = " + piVal));
          $ctx.state = -2;
          break;
        default:
          return $ctx.end();
      }
  }, $__0, this);
}));
common.runOnAllPlatforms(pi, "pi example");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBpLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStCQTtBQUFBLFdBQVcsQ0FBQztBQUNaLEFBQUksRUFBQSxDQUFBLFFBQU8sRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFVBQVMsQ0FBQyxDQUFDO0FBQ2xDLEFBQUksRUFBQSxDQUFBLEtBQUksRUFBSSxDQUFBLFFBQU8sVUFBVSxDQUFDO0FBQzlCLEFBQUksRUFBQSxDQUFBLE1BQUssRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFdBQVUsQ0FBQyxDQUFDO0FBRWpDLEFBQU0sRUFBQSxDQUFBLGNBQWEsRUFBSSxTQUFPLENBQUM7QUFFL0IsQUFBSSxFQUFBLENBQUEsRUFBQyxFQUFJLENBQUEsS0FBSSxBQUFDLENBdENkLGVBQWMsc0JBQXNCLEFBQUMsQ0FzQ3RCLGNBQVUsRUFBQyxDQUFHLENBQUEsVUFBUzs7Ozs7OztBQXRDdEMsT0FBTyxDQUFQLGVBQWMsd0JBQXdCLEFBQWQsQ0FBeEIsU0FBUyxJQUFHLENBQUc7QUFDVCxVQUFPLElBQUc7OztrQkFzQ0UsQ0FBQSxFQUFDLFFBQVE7QUFFdkIsZ0JBQU0sSUFBSSxBQUFDLENBQUMsNkJBQTRCLENBQUMsQ0FBQztBQUMxQyxlQUFLLGdCQUFnQixBQUFDLENBQUMsVUFBUyxDQUFDLENBQUM7QUFDbEMsZ0JBQU0sSUFBSSxBQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7WUFFUCxDQUFBLEVBQUMsTUFBTSxBQUFDLENBQUMsY0FBYSxDQUFHLENBQUEsRUFBQyxNQUFNLElBQUksQ0FBQztZQUNyQyxDQUFBLEVBQUMsTUFBTSxBQUFDLENBQUMsY0FBYSxDQUFHLENBQUEsRUFBQyxNQUFNLElBQUksQ0FBQztlQUNsQyxDQUFBLEVBQUMsS0FBSyxBQUFDLENBQUMsQ0FBQSxJQUFJLEFBQUMsQ0FBQyxDQUFBLENBQUMsSUFBSSxBQUFDLENBQUMsQ0FBQSxJQUFJLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDOzs7OztBQS9DN0MsZUFnRDBCLENBQUEsRUFBQyxTQUFTLEFBQUMsQ0FBQyxJQUFHLEdBQUcsQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBaER6Qjs7b0JBQXZCLENBQUEsSUFBRyxLQUFLOzs7O2dCQWlEUSxDQUFBLENBQUMsR0FBRSxFQUFLLFVBQVEsQ0FBQyxFQUFJLGVBQWE7QUFFOUMsZ0JBQU0sSUFBSSxBQUFDLEVBQUMsT0FBTyxFQUFDLE1BQUksRUFBRyxDQUFDOzs7O0FBbkRoQyxlQUFPLENBQUEsSUFBRyxJQUFJLEFBQUMsRUFBQyxDQUFBOztBQUNtQixFQUMvQixPQUE2QixLQUFHLENBQUMsQ0FBQztBQWtEdEMsQ0FwRHVELENBb0R0RCxDQUFDO0FBRUYsS0FBSyxrQkFBa0IsQUFBQyxDQUFDLEVBQUMsQ0FBRyxhQUFXLENBQUMsQ0FBQztBQUMxQyIsImZpbGUiOiJiZWNobWFya3MvcGkuanMiLCJzb3VyY2VSb290IjoiZXhhbXBsZXMvZXM2Iiwic291cmNlc0NvbnRlbnQiOlsiLypcbkNvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBBcnJheUZpcmVcbkNvcHlyaWdodCAoYykgMjAxNSBHw6Fib3IgTWV6xZEgYWthIHVuYm9ybmNoaWtrZW4gKGdhYm9yLm1lem9Ab3V0bG9vay5jb20pXG5BbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5SZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLFxuYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3JcbiAgb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuICogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgQXJyYXlGaXJlIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tXG4gIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG5cblRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRURcbldBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkVcbkRJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SXG5BTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbihJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbkxPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTlxuQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbihJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTXG5TT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cblwidXNlIHN0cmljdFwiO1xubGV0IEJsdWViaXJkID0gcmVxdWlyZShcImJsdWViaXJkXCIpO1xubGV0IGFzeW5jID0gQmx1ZWJpcmQuY29yb3V0aW5lO1xubGV0IGNvbW1vbiA9IHJlcXVpcmUoXCIuLi9jb21tb25cIik7XG5cbmNvbnN0IG51bWJlck9mUG9pbnRzID0gMjAwMDAwMDA7XG5cbmxldCBwaSA9IGFzeW5jKGZ1bmN0aW9uKihhZiwgZGV2aWNlSW5mbykge1xuICAgIGxldCBBRkFycmF5ID0gYWYuQUZBcnJheTtcblxuICAgIGNvbnNvbGUubG9nKFwiQ2FsY3VsYXRpbmcgcGkgb24gZGV2aWNlOlxcblwiKTtcbiAgICBjb21tb24ucHJpbnREZXZpY2VJbmZvKGRldmljZUluZm8pO1xuICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuXG4gICAgbGV0IHggPSBhZi5yYW5kdShudW1iZXJPZlBvaW50cywgYWYuZHR5cGUuZjMyKTtcbiAgICBsZXQgeSA9IGFmLnJhbmR1KG51bWJlck9mUG9pbnRzLCBhZi5kdHlwZS5mMzIpO1xuICAgIGxldCBkaXN0ID0gYWYuc3FydCh4Lm11bCh4KS5hZGQoeS5tdWwoeSkpKTtcbiAgICBsZXQgbnVtSW5zaWRlID0geWllbGQgYWYuc3VtQXN5bmMoZGlzdC5sdCgxKSk7XG4gICAgbGV0IHBpVmFsID0gKDQuMCAqICBudW1JbnNpZGUpIC8gbnVtYmVyT2ZQb2ludHM7XG5cbiAgICBjb25zb2xlLmxvZyhgUEkgPSAke3BpVmFsfWApO1xufSk7XG5cbmNvbW1vbi5ydW5PbkFsbFBsYXRmb3JtcyhwaSwgXCJwaSBleGFtcGxlXCIpO1xuIl19
