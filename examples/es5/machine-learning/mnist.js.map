{"version":3,"sources":["machine-learning/mnist.js"],"names":[],"mappings":"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","file":"machine-learning/mnist.js","sourcesContent":["\"use strict\";\r\n\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\nlet fs = Bluebird.promisifyAll(require(\"fs-extra\"));\r\nlet ref = require(\"ref\");\r\nlet float = ref.types.float;\r\nlet uint = ref.types.uint;\r\nlet debug = require(\"debug\")(\"af:mnist\");\r\nlet _ = require(\"lodash\");\r\nlet assert = require(\"better-assert\");\r\nlet path = require(\"path\");\r\n\r\nlet readData = async(function*(f, data) {\r\n    let bytesRead = yield fs.readAsync(f, data, 0, data.length, null);\r\n    if (bytesRead !== data.length) {\r\n        throw new Error(\"File reading error!\");\r\n    }\r\n});\r\n\r\nlet readIdx = async(function*(path, type) {\r\n    let file = yield fs.openAsync(path, \"r\");\r\n    try {\r\n        let d = new Buffer(4);\r\n\r\n        yield readData(file, d);\r\n\r\n        if (d[2] != 8) {\r\n            throw new Error(\"Unsupported data type\");\r\n        }\r\n\r\n        const numDims = d[3];\r\n\r\n        // Read the dimensions\r\n        let elem = 1;\r\n        let dims = [];\r\n        for (let i = 0; i < numDims; i++) {\r\n            yield readData(file, d);\r\n            let dim = d.readUInt32BE();\r\n            elem *= dim;\r\n            dims.push(dim);\r\n        }\r\n\r\n        // Read the data\r\n        let bdata = new Buffer(elem);\r\n        yield readData(file, bdata);\r\n        let data = new Buffer(bdata.length * type.size);\r\n        for (let i = 0; i < bdata.length; i++) {\r\n            let byte = bdata[i];\r\n            type.set(data, i * type.size, byte);\r\n        }\r\n\r\n        return {\r\n            numDims: numDims,\r\n            dims: dims,\r\n            data: data\r\n        };\r\n    }\r\n    finally {\r\n        yield fs.closeAsync(file);\r\n    }\r\n});\r\n\r\nlet mnist = {\r\n    setup: async(function*(af, expandLabels, frac) {\r\n        frac = Math.min(frac || 1.0, 0.8);\r\n        let dataRoot =  path.resolve(path.join(__dirname, \"../../ml_lab/data/mnist\"));\r\n        let AFArray = af.AFArray;\r\n        let Dim4 = af.Dim4;\r\n\r\n        let imageData = yield readIdx(path.join(dataRoot, \"images-subset\"), float);\r\n        let labelData = yield readIdx(path.join(dataRoot, \"labels-subset\"), uint);\r\n\r\n        let rIDims = new Dim4(_(imageData.dims).reverse().value());\r\n        let images = yield AFArray.createAsync(rIDims, af.dType.f32, imageData.data);\r\n\r\n        let r = af.randu(10000, af.dType.f32);\r\n        let cond = r.lt(frac);\r\n        let trainIndices = af.where(cond);\r\n        let testIndices = af.where(cond.not());\r\n\r\n        let trainImages = af.lookup(images, trainIndices, 2).div(255);\r\n        let testImages = af.lookup(images, testIndices, 2).div(255);\r\n\r\n        let numClasses = 10;\r\n        let numTrain = trainImages.dims(2);\r\n        let numTest = testImages.dims(2);\r\n\r\n        debug(`Training sample count: ${numTrain}`);\r\n        debug(`Test sample count: ${numTest}`);\r\n\r\n        let trainLabels;\r\n        let testLabels;\r\n\r\n        if (expandLabels) {\r\n            trainLabels = af.constant(0, numClasses, numTrain, af.dType.f32);\r\n            testLabels = af.constant(0, numClasses, numTest, af.dType.f32);\r\n\r\n            assert(trainIndices.type() === af.dType.u32);\r\n            assert(testIndices.type() === af.dType.u32);\r\n\r\n            let hTrainIdx = yield trainIndices.hostAsync();\r\n            let hTestIdx = yield testIndices.hostAsync();\r\n\r\n            for (let i = 0; i < numTrain; i++) {\r\n                let idx = uint.get(hTrainIdx, i * uint.size);\r\n                let label = uint.get(labelData.data, idx * uint.size);\r\n                assert(label >= 0 && label <= 9);\r\n                trainLabels.set(label, i, 1);\r\n            }\r\n\r\n            for (let i = 0; i < numTest; i++) {\r\n                let idx = uint.get(hTestIdx, i * uint.size);\r\n                let label = uint.get(labelData.data, idx * uint.size);\r\n                assert(label >= 0 && label <= 9);\r\n                testLabels.set(label, i, 1);\r\n            }\r\n        }\r\n        else {\r\n            let labels = yield AFArray.createAsync(labelData.dims[0], af.dType.u32, labelData.data);\r\n            trainLabels = labels.at(trainIndices);\r\n            testLabels = labels.at(testIndices);\r\n        }\r\n\r\n        return {\r\n            numClasses: numClasses,\r\n            numTrain: numTrain,\r\n            numTest: numTest,\r\n            trainImages: trainImages,\r\n            testImages: testImages,\r\n            trainLabels: trainLabels,\r\n            testLabels: testLabels\r\n        };\r\n    })\r\n};\r\n\r\nmodule.exports = mnist;"],"sourceRoot":"/source/"}