{"version":3,"sources":["machine-learning/ann.js"],"names":[],"mappings":"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","file":"machine-learning/ann.js","sourcesContent":["\"use strict\";\r\n\r\nlet _ = require(\"lodash\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\nlet debug = require(\"debug\")(\"af:ann\");\r\nlet now = require(\"performance-now\");\r\n\r\nfunction ANN(af, layers, range) {\r\n    range = range || 0.05;\r\n    this.af = af;\r\n    this.numLayers = layers.length;\r\n    this.signal = [];\r\n    this.weights = [];\r\n    for (let i = 0; i < this.numLayers; i++) {\r\n        this.signal.push(new af.AFArray());\r\n        if (i < this.numLayers - 1) {\r\n            let w = af.randu(layers[i] + 1, layers[i + 1], af.dType.f32).mul(range).sub(range / 2);\r\n            this.weights.push(w);\r\n        }\r\n    }\r\n}\r\n\r\nlet proto = ANN.prototype;\r\n\r\nproto.deriv = function (out) {\r\n    return out.rhsSub(1).mul(out);\r\n};\r\n\r\nproto.addBias = function (input) {\r\n    return this.af.join(1, this.af.constant(1, input.dims(0), this.af.dType.f32), input);\r\n};\r\n\r\nproto._calculateError = function(out, pred) {\r\n    let dif = out.sub(pred);\r\n    let sq = dif.mul(dif);\r\n    return Math.sqrt(this.af.sum(sq)) / sq.elements();\r\n};\r\n\r\nproto.forwardPropagate = function (input) {\r\n    this.signal[0].set(input);\r\n    for (let i = 0; i < this.numLayers - 1; i++) {\r\n        let self = this;\r\n        this.af.scope(function() {\r\n            let inVec = self.addBias(self.signal[i]);\r\n            let outVec = self.af.matMul(inVec, self.weights[i]);\r\n            self.signal[i + 1].set(self.af.sigmoid(outVec));\r\n        });\r\n    }\r\n};\r\n\r\nproto.backPropagate = function (target, alpha) {\r\n    let self = this;\r\n    let af = self.af;\r\n    let Seq = self.af.Seq;\r\n\r\n    // Get error for output layer\r\n    af.scope(function() {\r\n        let outVec = self.signal[self.numLayers - 1];\r\n        let err = outVec.sub(target);\r\n        let m = target.dims(0);\r\n\r\n        for (let i = self.numLayers - 2; i >= 0; i--) {\r\n            af.scope(function() {\r\n                let inVec = self.addBias(self.signal[i]);\r\n                let delta = af.transpose(self.deriv(outVec).mul(err));\r\n\r\n                // Adjust weights\r\n                let grad = af.matMul(delta, inVec).mul(alpha).neg().div(m);\r\n                self.weights[i].addAssign(af.transpose(grad));\r\n\r\n                // Input to current layer is output of previous\r\n                outVec = self.signal[i];\r\n                err.set(self.af.matMulTT(delta, self.weights[i]));\r\n\r\n                // Remove the error of bias and propagate backward\r\n                err.set(err.at(af.span, new Seq(1, outVec.dims(1))));\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nproto.predict = function (input) {\r\n    this.forwardPropagate(input);\r\n    return this.signal[this.numLayers - 1].copy();\r\n};\r\n\r\nproto.train = function(input, target, options) {\r\n    let self = this;\r\n    let af = self.af;\r\n    let Seq = self.af.Seq;\r\n\r\n    let numSamples = input.dims(0);\r\n    let numBatches = numSamples / options.batchSize;\r\n\r\n    let err = 0;\r\n\r\n    for (let i = 0; i < options.maxEpochs; i++) {\r\n        const start = now();\r\n        for (let j = 0; j < numBatches - 1; j++) {\r\n            af.scope(() => {\r\n                let startPos = j * options.batchSize;\r\n                let endPos = startPos + options.batchSize - 1;\r\n\r\n                let x = input.at(new Seq(startPos, endPos), af.span);\r\n                let y = target.at(new Seq(startPos, endPos), af.span);\r\n\r\n                self.forwardPropagate(x);\r\n                self.backPropagate(y, options.alpha);\r\n            });\r\n        }\r\n\r\n        af.scope(() => {\r\n            // Validate with last batch\r\n            let startPos = (numBatches - 1) * options.batchSize;\r\n            let endPos = numSamples - 1;\r\n            let outVec = self.predict(input.at(new Seq(startPos, endPos), af.span));\r\n            err = self._calculateError(outVec, target.at(new Seq(startPos, endPos), af.span));\r\n        });\r\n\r\n        const end = now();\r\n        console.log(`Epoch: ${i + 1}, Error: ${err.toFixed(6)}, Duration: ${((end - start) / 1000).toFixed(4)} seconds`);\r\n\r\n        // Check if convergence criteria has been met\r\n        if (err < options.maxError) {\r\n            console.log(`Converged on Epoch: ${i + 1}`);\r\n            break;\r\n        }\r\n    }\r\n\r\n    return err;\r\n};\r\n\r\nmodule.exports = ANN;"],"sourceRoot":"/source/"}