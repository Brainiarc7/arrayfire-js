{"version":3,"sources":["machine-learning/ann.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACnC,IAAI,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC;AAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC;AACvC,IAAI,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;;AAErC,SAAS,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;AAC5B,SAAK,GAAG,KAAK,IAAI,IAAI,CAAC;AACtB,QAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACb,QAAI,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;AAC/B,QAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACjB,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE;AACrC,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;AACnC,YAAI,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;AACxB,gBAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;AACvF,gBAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACxB;KACJ;CACJ;;AAED,IAAI,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC;;AAE1B,KAAK,CAAC,KAAK,GAAG,UAAU,GAAG,EAAE;AACzB,WAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;CACjC,CAAC;;AAEF,KAAK,CAAC,OAAO,GAAG,UAAU,KAAK,EAAE;AAC7B,WAAO,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;CACxF,CAAC;;AAEF,KAAK,CAAC,eAAe,GAAG,KAAK,yBAAC,iBAAU,GAAG,EAAE,IAAI;QACzC,GAAG;;;;;AAAH,uBAAG,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;kCAChB,IAAI;;2BAAY,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;;;iEAAzC,IAAI;;;;;;;;CACnB,EAAC,CAAC;;AAEH,KAAK,CAAC,gBAAgB,GAAG,UAAU,KAAK,EAAE;;;AACtC,QAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;+BACjB,CAAC;AACN,YAAI,IAAI,QAAO,CAAC;AAChB,cAAK,EAAE,CAAC,KAAK,CAAC,YAAW;AACrB,gBAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,gBAAI,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,gBAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;SACnD,CAAC,CAAC;;;AANP,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;cAApC,CAAC;KAOT;CACJ,CAAC;;AAEF,KAAK,CAAC,aAAa,GAAG,UAAU,MAAM,EAAE,KAAK,EAAE;AAC3C,QAAI,IAAI,GAAG,IAAI,CAAC;AAChB,QAAI,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;AACjB,QAAI,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG;;;AAAC,AAGtB,MAAE,CAAC,KAAK,CAAC,YAAW;AAChB,YAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AAC7C,YAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAC7B,YAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;qCAEd,CAAC;AACN,cAAE,CAAC,KAAK,CAAC,YAAW;AAChB,oBAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,oBAAI,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;;AAAC,AAGtD,oBAAI,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3D,oBAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;;;AAAC,AAG9C,sBAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,mBAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;;;AAAC,AAGlD,mBAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACxD,CAAC,CAAC;;;AAfP,aAAK,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;mBAArC,CAAC;SAgBT;KACJ,CAAC,CAAC;CACN,CAAC;;AAEF,KAAK,CAAC,OAAO,GAAG,UAAU,KAAK,EAAE;AAC7B,QAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AAC7B,WAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;CACjD,CAAC;;AAEF,KAAK,CAAC,KAAK,GAAG,KAAK,yBAAC,kBAAU,KAAK,EAAE,MAAM,EAAE,OAAO;QAC5C,IAAI,EACJ,EAAE,EACF,GAAG,EAEH,UAAU,EACV,UAAU,EAEV,GAAG,EAEE,CAAC,EACA,KAAK,UACF,CAAC,EAqBJ,GAAG;;;;;;AAhCT,wBAAI,GAAG,IAAI;AACX,sBAAE,GAAG,IAAI,CAAC,EAAE;AACZ,uBAAG,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG;AAEjB,8BAAU,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1B,8BAAU,GAAG,UAAU,GAAG,OAAO,CAAC,SAAS;AAE3C,uBAAG,GAAG,CAAC;AAEF,qBAAC,GAAG,CAAC;;;0BAAE,CAAC,GAAG,OAAO,CAAC,SAAS,CAAA;;;;;AAC3B,yBAAK,GAAG,GAAG,EAAE;;6CACV,CAAC;AACN,0BAAE,CAAC,KAAK,CAAC,YAAW;AAChB,gCAAI,QAAQ,GAAG,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;AACrC,gCAAI,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC;;AAE9C,gCAAI,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;AACrD,gCAAI,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;;AAEtD,gCAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;AACzB,gCAAI,CAAC,aAAa,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;yBACxC,CAAC,CAAC;;;AAVP,yBAAS,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;+BAAhC,CAAC;qBAWT;;;2BAEK,EAAE,CAAC,KAAK,CAAC,KAAK,yBAAC;4BAEb,QAAQ,EACR,MAAM,EACN,MAAM;;;;;;AAFN,gDAAQ,GAAG,CAAC,UAAU,GAAG,CAAC,CAAA,GAAI,OAAO,CAAC,SAAS;AAC/C,8CAAM,GAAG,UAAU,GAAG,CAAC;AACvB,8CAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;;+CAC3D,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;;;AAAvF,2CAAG;;;;;;;;qBACN,EAAC,CAAC;;;AAEG,uBAAG,GAAG,GAAG,EAAE;;AACjB,2BAAO,CAAC,GAAG,cAAW,CAAC,GAAG,CAAC,CAAA,iBAAY,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAe,CAAC,CAAC,GAAG,GAAG,KAAK,CAAA,GAAI,IAAI,CAAA,CAAE,OAAO,CAAC,CAAC,CAAC,cAAW;;;AAAC;0BAG7G,GAAG,GAAG,OAAO,CAAC,QAAQ,CAAA;;;;;AACtB,2BAAO,CAAC,GAAG,0BAAuB,CAAC,GAAG,CAAC,CAAA,CAAG,CAAC;;;;AA5BZ,qBAAC,EAAE;;;;;sDAiCnC,GAAG;;;;;;;;CACb,EAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"machine-learning/ann.js","sourcesContent":["\"use strict\";\n\nlet _ = require(\"lodash\");\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\nlet debug = require(\"debug\")(\"af:ann\");\nlet now = require(\"performance-now\");\n\nfunction ANN(af, layers, range) {\n    range = range || 0.05;\n    this.af = af;\n    this.numLayers = layers.length;\n    this.signal = [];\n    this.weights = [];\n    for (let i = 0; i < this.numLayers; i++) {\n        this.signal.push(new af.AFArray());\n        if (i < this.numLayers - 1) {\n            let w = af.randu(layers[i] + 1, layers[i + 1], af.dType.f32).mul(range).sub(range / 2);\n            this.weights.push(w);\n        }\n    }\n}\n\nlet proto = ANN.prototype;\n\nproto.deriv = function (out) {\n    return out.rhsSub(1).mul(out);\n};\n\nproto.addBias = function (input) {\n    return this.af.join(1, this.af.constant(1, input.dims(0), this.af.dType.f32), input);\n};\n\nproto._calculateError = async(function*(out, pred) {\n    let dif = out.sub(pred);\n    return Math.sqrt(yield this.af.sumAsync(dif.mul(dif)));\n});\n\nproto.forwardPropagate = function (input) {\n    this.signal[0].set(input);\n    for (let i = 0; i < this.numLayers - 1; i++) {\n        let self = this;\n        this.af.scope(function() {\n            let inVec = self.addBias(self.signal[i]);\n            let outVec = self.af.matMul(inVec, self.weights[i]);\n            self.signal[i + 1].set(self.af.sigmoid(outVec));\n        });\n    }\n};\n\nproto.backPropagate = function (target, alpha) {\n    let self = this;\n    let af = self.af;\n    let Seq = self.af.Seq;\n\n    // Get error for output layer\n    af.scope(function() {\n        let outVec = self.signal[self.numLayers - 1];\n        let err = outVec.sub(target);\n        let m = target.dims(0);\n\n        for (let i = self.numLayers - 2; i >= 0; i--) {\n            af.scope(function() {\n                let inVec = self.addBias(self.signal[i]);\n                let delta = af.transpose(self.deriv(outVec).mul(err));\n\n                // Adjust weights\n                let grad = af.matMul(delta, inVec).mul(alpha).neg().div(m);\n                self.weights[i].addAssign(af.transpose(grad));\n\n                // Input to current layer is output of previous\n                outVec = self.signal[i];\n                err.set(self.af.matMulTT(delta, self.weights[i]));\n\n                // Remove the error of bias and propagate backward\n                err.set(err.at(af.span, new Seq(1, outVec.dims(1))));\n            });\n        }\n    });\n};\n\nproto.predict = function (input) {\n    this.forwardPropagate(input);\n    return this.signal[this.numLayers - 1].copy();\n};\n\nproto.train = async(function*(input, target, options) {\n    let self = this;\n    let af = self.af;\n    let Seq = self.af.Seq;\n\n    let numSamples = input.dims(0);\n    let numBatches = numSamples / options.batchSize;\n\n    let err = 0;\n\n    for (let i = 0; i < options.maxEpochs; i++) {\n        const start = now();\n        for (let j = 0; j < numBatches - 1; j++) {\n            af.scope(function() {\n                let startPos = j * options.batchSize;\n                let endPos = startPos + options.batchSize - 1;\n\n                let x = input.at(new Seq(startPos, endPos), af.span);\n                let y = target.at(new Seq(startPos, endPos), af.span);\n\n                self.forwardPropagate(x);\n                self.backPropagate(y, options.alpha);\n            });\n        }\n\n        yield af.scope(async(function*() {\n            // Validate with last batch\n            let startPos = (numBatches - 1) * options.batchSize;\n            let endPos = numSamples - 1;\n            let outVec = self.predict(input.at(new Seq(startPos, endPos), af.span));\n            err = yield self._calculateError(outVec, target.at(new Seq(startPos, endPos), af.span));\n        }));\n\n        const end = now();\n        console.log(`Epoch: ${i + 1}, Error: ${err.toFixed(4)}, Duration: ${((end - start) / 1000).toFixed(4)} seconds`);\n\n        // Check if convergence criteria has been met\n        if (err < options.maxError) {\n            console.log(`Converged on Epoc: ${i + 1}`);\n            break;\n        }\n    }\n\n    return err;\n});\n\nmodule.exports = ANN;"],"sourceRoot":"/source/"}