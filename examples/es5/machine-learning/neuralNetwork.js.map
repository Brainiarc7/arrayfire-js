{"version":3,"sources":["machine-learning/neuralNetwork.js"],"names":[],"mappings":"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","file":"machine-learning/neuralNetwork.js","sourcesContent":["\"use strict\";\r\n\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\nlet common = require(\"../common\");\r\nlet mnist = require(\"./mnist\");\r\nlet ANN = require(\"./ann\");\r\nlet now = require(\"performance-now\");\r\n\r\nlet accuracy = function(af, predicted, target) {\r\n    let pMax = af.findMaxAt(predicted, 1);\r\n    let tMax = af.findMaxAt(target, 1);\r\n    return (100 * (af.count(pMax.index.eq(tMax.index)))) / tMax.index.elements();\r\n};\r\n\r\nlet annDemo = async(function*(af, deviceInfo) {\r\n    console.log(\"Running ANN Demo on device:\\n\");\r\n    common.printDeviceInfo(deviceInfo);\r\n    console.log(\"\");\r\n\r\n    console.log(\"Setting up training data.\");\r\n    let data = yield mnist.setup(af, true, 0.6);\r\n\r\n    let featureSize = data.trainImages.elements() / data.numTrain;\r\n\r\n    // Reshape images into feature vectors\r\n    let trainFeats = af.transpose(af.modDims(data.trainImages, featureSize, data.numTrain));\r\n    let testFeats = af.transpose(af.modDims(data.testImages, featureSize, data.numTest));\r\n\r\n    let trainTarget = af.transpose(data.trainLabels);\r\n    let testTarget = af.transpose(data.testLabels);\r\n\r\n    let network = new ANN(af, [trainFeats.dims(1), 100, 50, data.numClasses]);\r\n\r\n    // Train network\r\n    const start = now();\r\n    network.train(\r\n        trainFeats,\r\n        trainTarget,\r\n        {\r\n            alpha: 1.0,\r\n            maxEpochs: 300,\r\n            batchSize: 100,\r\n            maxError: 0.0001\r\n        }\r\n    );\r\n    yield af.waitAsync();\r\n    const end = now();\r\n\r\n    // Run the trained network and test accuracy.\r\n    let trainOutput = network.predict(trainFeats);\r\n    let testOutput = network.predict(testFeats);\r\n\r\n    console.log(\"Training set:\");\r\n    console.log(`Accuracy on training data: ${(accuracy(af, trainOutput, trainTarget)).toFixed(2)}`);\r\n\r\n    console.log(\"Test set:\");\r\n    console.log(`Accuracy on testing  data: ${(accuracy(af, testOutput, testTarget)).toFixed(2)}`);\r\n\r\n    console.log(`Training time: ${((end - start) / 1000).toFixed(10)} seconds\\n`);\r\n});\r\n\r\ncommon.runOnBestDevice(annDemo, \"ANN Demo\");"],"sourceRoot":"/source/"}