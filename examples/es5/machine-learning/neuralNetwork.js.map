{"version":3,"names":[],"mappings":"","sources":["machine-learning/neuralNetwork.js"],"sourcesContent":["\"use strict\";\n\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\nlet common = require(\"../common\");\nlet mnist = require(\"./mnist\");\nlet ANN = require(\"./ann\");\nlet now = require(\"performance-now\");\n\nlet accuracy = async(function*(af, predicted, target) {\n    let pMax = yield af.findMaxAtAsync(predicted, 1);\n    let tMax = yield af.findMaxAtAsync(target, 1);\n    return (100 * (yield af.countAsync(pMax.index.eq(tMax.index)))) / tMax.index.elements();\n});\n\nlet annDemo = async(function*(af, deviceInfo) {\n    console.log(\"Running ANN Demo on device:\\n\");\n    common.printDeviceInfo(deviceInfo);\n    console.log(\"\");\n\n    console.log(\"Setting up training data.\");\n    let data = yield mnist.setup(af, true, 0.6);\n\n    let featureSize = data.trainImages.elements() / data.numTrain;\n\n    // Reshape images into feature vectors\n    let trainFeats = af.transpose(af.modDims(data.trainImages, featureSize, data.numTrain));\n    let testFeats = af.transpose(af.modDims(data.testImages, featureSize, data.numTest));\n\n    let trainTarget = af.transpose(data.trainLabels);\n    let testTarget = af.transpose(data.testLabels);\n\n    let network = new ANN(af, [trainFeats.dims(1), 100, 50, data.numClasses]);\n\n    // Train network\n    const start = now();\n    yield network.train(\n        trainFeats,\n        trainTarget,\n        {\n            alpha: 1.0,\n            maxEpochs: 300,\n            batchSize: 100,\n            maxError: 1.0\n        }\n    );\n    yield af.waitAsync();\n    const end = now();\n\n    // Run the trained network and test accuracy.\n    let trainOutput = network.predict(trainFeats);\n    let testOutput = network.predict(testFeats);\n\n    console.log(\"Training set:\");\n    console.log(`Accuracy on training data: ${(yield accuracy(af, trainOutput, trainTarget)).toFixed(2)}`);\n\n    console.log(\"Test set:\");\n    console.log(`Accuracy on testing  data: ${(yield accuracy(af, testOutput, testTarget)).toFixed(2)}`);\n\n    console.log(`Training time: ${((end - start) / 1000).toFixed(10)} seconds\\n`);\n});\n\ncommon.runOnBestDevice(annDemo, \"ANN Demo\");"],"file":"machine-learning/neuralNetwork.js","sourceRoot":"/source/"}