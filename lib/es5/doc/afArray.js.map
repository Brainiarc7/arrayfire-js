{"version":3,"sources":["doc/afArray.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;IAEP,OAAO;AACT,aADE,OAAO,GACK;8BADZ,OAAO;KAER;;iBAFC,OAAO;;+BAIF,EACN;;;mCAEU,EACV;;;+BAEM,EACN;;;qCAEY,EACZ;;;iCAEQ,EACR;;;gCAEO,EACP;;;gCAEO,EACP;;;+BAEM,EACN;;;+BAEM,EACN;;;kCAES,EACT;;;kCAES,EACT;;;gCAEO,EACP;;;+BAEM,EACN;;;kCAES,EACT;;;kCAES,EACT;;;mCAEU,EACV;;;mCAEU,EACV;;;mCAEU,EACV;;;mCAEU,EACV;;;gCAEO,EACP;;;gCAEO,EACP;;;mCAEU,EACV;;;mCAEU,EACV;;;oCAEW,EACX;;;oCAEW,EACX;;;iCAEQ,EACR;;;iCAEQ,EACR;;;mCAEU,EACV;;;mCAEU,EACV;;;mCAEU,EACV;;;mCAEU,EACV;;;yCAEgB,EAChB;;;yCAEgB,EAChB;;;qCAEY,EACZ;;;qCAEY,EACZ;;;oCAEW,EACX;;;oCAEW,EACX;;;iCAEQ,EACR;;;iCAEQ,EACR;;;iCAEQ,EACR;;;6BAEI,EACJ;;;8BAEK,EACL;;;8BAEK,EACL;;;gCAEO,EACP;;;+BAEM,EACN;;;+BAEM,EACN;;;iCAEQ,EACR;;;6BAEI,EACJ;;;iCAEQ,EACR;;;8BAEK,EACL;;;8BAEK,EACL;;;oCAEW,EACX;;;8BAEK,EACL;;;oCAEW,EACX;;;8BAEK,EACL;;;oCAEW,EACX;;;8BAEK,EACL;;;oCAEW,EACX;;;oCAEW,EACX;;;oCAEW,EACX;;;oCAEW,EACX;;;oCAEW,EACX;;;6BAEI,EACJ;;;6BAEI,EACJ;;;6BAEI,EACJ;;;6BAEI,EACJ;;;6BAEI,EACJ;;;8BAEK,EACL;;;8BAEK,EACL;;;6BAEI,EACJ;;;iCAEQ,EACR;;;gCAEO,EACP;;;iCAEQ,EACR;;;iCAEQ,EACR;;;iCAEQ,EACR;;;iCAEQ,EACR;;;iCAEQ,EACR;;;uCAEc,EACd;;;uCAEc,EACd;;;uCAEc,EACd;;;uCAEc,EACd;;;gCAEO,EACP;;;gCAEO,EACP;;;gCAEO,EACP;;;gCAEO,EACP;;;gCAEO,EACP;;;iCAEQ,EACR;;;iCAEQ,EACR;;;gCAEO,EACP;;;oCAEW,EACX;;;mCAEU,EACV;;;oCAEW,EACX;;;8BAEK,EACL;;;8BAEK,EACL;;;4BAEG,EACH;;;4BAEG,EACH;;;WAlSC,OAAO;;;AAqSb,OAAO,CAAC,MAAM,GAAG,YAAW,EAC3B,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC","file":"doc/afArray.js","sourcesContent":["\"use strict\";\r\n\r\nclass AFArray {\r\n    constructor() {\r\n    }\r\n\r\n    free() {\r\n    }\r\n\r\n    elements() {\r\n    }\r\n\r\n    host() {\r\n    }\r\n\r\n    copyToHost() {\r\n    }\r\n\r\n    scalar() {\r\n    }\r\n\r\n    value() {\r\n    }\r\n\r\n    write() {\r\n    }\r\n\r\n    type() {\r\n    }\r\n\r\n    dims() {\r\n    }\r\n\r\n    numdims() {\r\n    }\r\n\r\n    numDims() {\r\n    }\r\n\r\n    bytes() {\r\n    }\r\n\r\n    copy() {\r\n    }\r\n\r\n    isempty() {\r\n    }\r\n\r\n    isEmpty() {\r\n    }\r\n\r\n    isscalar() {\r\n    }\r\n\r\n    isScalar() {\r\n    }\r\n\r\n    isvector() {\r\n    }\r\n\r\n    isVector() {\r\n    }\r\n\r\n    isrow() {\r\n    }\r\n\r\n    isRow() {\r\n    }\r\n\r\n    iscolumn() {\r\n    }\r\n\r\n    isColumn() {\r\n    }\r\n\r\n    iscomplex() {\r\n    }\r\n\r\n    isComplex() {\r\n    }\r\n\r\n    isreal() {\r\n    }\r\n\r\n    isReal() {\r\n    }\r\n\r\n    isdouble() {\r\n    }\r\n\r\n    isDouble() {\r\n    }\r\n\r\n    issingle() {\r\n    }\r\n\r\n    isSingle() {\r\n    }\r\n\r\n    isrealfloating() {\r\n    }\r\n\r\n    isRealFloating() {\r\n    }\r\n\r\n    isfloating() {\r\n    }\r\n\r\n    isFloating() {\r\n    }\r\n\r\n    isinteger() {\r\n    }\r\n\r\n    isInteger() {\r\n    }\r\n\r\n    isbool() {\r\n    }\r\n\r\n    isBool() {\r\n    }\r\n\r\n    afEval() {\r\n    }\r\n\r\n    at() {\r\n    }\r\n\r\n    row() {\r\n    }\r\n\r\n    col() {\r\n    }\r\n\r\n    slice() {\r\n    }\r\n\r\n    rows() {\r\n    }\r\n\r\n    cols() {\r\n    }\r\n\r\n    slices() {\r\n    }\r\n\r\n    as() {\r\n    }\r\n\r\n    assign() {\r\n    }\r\n\r\n    set() {\r\n    }\r\n\r\n    add() {\r\n    }\r\n\r\n    addAssign() {\r\n    }\r\n\r\n    sub() {\r\n    }\r\n\r\n    subAssign() {\r\n    }\r\n\r\n    mul() {\r\n    }\r\n\r\n    mulAssign() {\r\n    }\r\n\r\n    div() {\r\n    }\r\n\r\n    divAssign() {\r\n    }\r\n\r\n    bitshiftl() {\r\n    }\r\n\r\n    bitShiftL() {\r\n    }\r\n\r\n    bitshiftr() {\r\n    }\r\n\r\n    bitShiftR() {\r\n    }\r\n\r\n    lt() {\r\n    }\r\n\r\n    gt() {\r\n    }\r\n\r\n    le() {\r\n    }\r\n\r\n    ge() {\r\n    }\r\n\r\n    eq() {\r\n    }\r\n\r\n    neq() {\r\n    }\r\n\r\n    and() {\r\n    }\r\n\r\n    or() {\r\n    }\r\n\r\n    bitAnd() {\r\n    }\r\n\r\n    bitOr() {\r\n    }\r\n\r\n    bitXor() {\r\n    }\r\n\r\n    rhsAdd() {\r\n    }\r\n\r\n    rhsSub() {\r\n    }\r\n\r\n    rhsMul() {\r\n    }\r\n\r\n    rhsDiv() {\r\n    }\r\n\r\n    rhsBitshiftl() {\r\n    }\r\n\r\n    rhsBitShiftL() {\r\n    }\r\n\r\n    rhsBitshiftr() {\r\n    }\r\n\r\n    rhsBitShiftR() {\r\n    }\r\n\r\n    rhsLt() {\r\n    }\r\n\r\n    rhsGt() {\r\n    }\r\n\r\n    rhsLe() {\r\n    }\r\n\r\n    rhsGe() {\r\n    }\r\n\r\n    rhsEq() {\r\n    }\r\n\r\n    rhsNeq() {\r\n    }\r\n\r\n    rhsAnd() {\r\n    }\r\n\r\n    rhsOr() {\r\n    }\r\n\r\n    rhsBitAnd() {\r\n    }\r\n\r\n    rhsBitOr() {\r\n    }\r\n\r\n    rhsBitXor() {\r\n    }\r\n\r\n    neg() {\r\n    }\r\n\r\n    not() {\r\n    }\r\n\r\n    T() {\r\n    }\r\n\r\n    H() {\r\n    }\r\n}\r\n\r\nAFArray.create = function() {\r\n};\r\n\r\nmodule.exports = AFArray;\r\n"],"sourceRoot":"/source/"}