"use strict";
"use strict";
var _ = require("lodash");
var assert = require("better-assert");
var Seq = require("./seq");
function makeGfor(af) {
  return function gfor() {
    var fPos = -1;
    for (var i = 0; i < arguments.length; i++) {
      if (_.isFunction(arguments[i])) {
        fPos = i;
        break;
      }
    }
    if (fPos === -1) {
      throw new Error("Body function argument expected.");
    }
    if (fPos === 0) {
      throw new Error("Seq arguments expected.");
    }
    var thisArg = arguments[fPos];
    if (arguments.length > fPos + 1 && _.isObject(fPos + 1)) {
      thisArg = arguments[fPos + 1];
    }
    var seq;
    if (fPos === 1) {
      seq = new Seq(arguments[0]);
    } else if (fPos === 2) {
      seq = new Seq(arguments[0], arguments[1]);
    } else {
      throw new Error("Invalid number of Seq arguments.");
    }
    seq.isGFor = true;
    af._gforToggle();
    try {
      arguments[fPos].call(thisArg, seq);
    } finally {
      af._gforToggle();
    }
  };
}
module.exports = makeGfor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ha2VHZm9yLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStCQTtBQUFBLFdBQVcsQ0FBQztBQUVaLEFBQUksRUFBQSxDQUFBLENBQUEsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLFFBQU8sQ0FBQyxDQUFDO0FBQ3pCLEFBQUksRUFBQSxDQUFBLE1BQUssRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLGVBQWMsQ0FBQyxDQUFDO0FBQ3JDLEFBQUksRUFBQSxDQUFBLEdBQUUsRUFBSSxDQUFBLE9BQU0sQUFBQyxDQUFDLE9BQU0sQ0FBQyxDQUFDO0FBRTFCLE9BQVMsU0FBTyxDQUFFLEVBQUMsQ0FBRztBQUNsQixPQUFPLFNBQVMsS0FBRyxDQUFFLEFBQUQsQ0FBRztBQUNuQixBQUFJLE1BQUEsQ0FBQSxJQUFHLEVBQUksRUFBQyxDQUFBLENBQUM7QUFDYixlQUFZLEVBQUEsQ0FBRyxDQUFBLENBQUEsRUFBSSxDQUFBLFNBQVEsT0FBTyxDQUFHLENBQUEsQ0FBQSxFQUFFLENBQUc7QUFDdEMsU0FBSSxDQUFBLFdBQVcsQUFBQyxDQUFDLFNBQVEsQ0FBRSxDQUFBLENBQUMsQ0FBQyxDQUFHO0FBQzVCLFdBQUcsRUFBSSxFQUFBLENBQUM7QUFDUixhQUFLO01BQ1Q7QUFBQSxJQUNKO0FBQUEsQUFDQSxPQUFJLElBQUcsSUFBTSxFQUFDLENBQUEsQ0FBRztBQUNiLFVBQU0sSUFBSSxNQUFJLEFBQUMsQ0FBQyxrQ0FBaUMsQ0FBQyxDQUFDO0lBQ3ZEO0FBQUEsQUFDQSxPQUFJLElBQUcsSUFBTSxFQUFBLENBQUc7QUFDWixVQUFNLElBQUksTUFBSSxBQUFDLENBQUMseUJBQXdCLENBQUMsQ0FBQztJQUM5QztBQUFBLEFBQ0ksTUFBQSxDQUFBLE9BQU0sRUFBSSxDQUFBLFNBQVEsQ0FBRSxJQUFHLENBQUMsQ0FBQztBQUM3QixPQUFJLFNBQVEsT0FBTyxFQUFJLENBQUEsSUFBRyxFQUFJLEVBQUEsQ0FBQSxFQUFLLENBQUEsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxJQUFHLEVBQUksRUFBQSxDQUFDLENBQUc7QUFDckQsWUFBTSxFQUFJLENBQUEsU0FBUSxDQUFFLElBQUcsRUFBSSxFQUFBLENBQUMsQ0FBQztJQUNqQztBQUFBLEFBQ0ksTUFBQSxDQUFBLEdBQUUsQ0FBQztBQUNQLE9BQUksSUFBRyxJQUFNLEVBQUEsQ0FBRztBQUNaLFFBQUUsRUFBSSxJQUFJLElBQUUsQUFBQyxDQUFDLFNBQVEsQ0FBRSxDQUFBLENBQUMsQ0FBQyxDQUFDO0lBQy9CLEtBQ0ssS0FBSSxJQUFHLElBQU0sRUFBQSxDQUFHO0FBQ2pCLFFBQUUsRUFBSSxJQUFJLElBQUUsQUFBQyxDQUFDLFNBQVEsQ0FBRSxDQUFBLENBQUMsQ0FBRyxDQUFBLFNBQVEsQ0FBRSxDQUFBLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEtBQ0s7QUFDRCxVQUFNLElBQUksTUFBSSxBQUFDLENBQUMsa0NBQWlDLENBQUMsQ0FBQztJQUN2RDtBQUFBLEFBQ0EsTUFBRSxPQUFPLEVBQUksS0FBRyxDQUFDO0FBQ2pCLEtBQUMsWUFBWSxBQUFDLEVBQUMsQ0FBQztBQUNoQixNQUFJO0FBQ0EsY0FBUSxDQUFFLElBQUcsQ0FBQyxLQUFLLEFBQUMsQ0FBQyxPQUFNLENBQUcsSUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FDQSxPQUFRO0FBQ0osT0FBQyxZQUFZLEFBQUMsRUFBQyxDQUFDO0lBQ3BCO0FBQUEsRUFDSixDQUFBO0FBQ0o7QUFBQSxBQUVBLEtBQUssUUFBUSxFQUFJLFNBQU8sQ0FBQztBQUFBIiwiZmlsZSI6Im1ha2VHZm9yLmpzIiwic291cmNlUm9vdCI6ImxpYi9lczYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBBcnJheUZpcmVcbiBDb3B5cmlnaHQgKGMpIDIwMTUgR8OhYm9yIE1lesWRIGFrYSB1bmJvcm5jaGlra2VuIChnYWJvci5tZXpvQG91dGxvb2suY29tKVxuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLFxuIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cbiAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vclxuIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIEFycmF5RmlyZSBub3IgdGhlIG5hbWVzIG9mIGl0c1xuIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tXG4gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORFxuIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG4gV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SXG4gQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTlxuIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xubGV0IGFzc2VydCA9IHJlcXVpcmUoXCJiZXR0ZXItYXNzZXJ0XCIpO1xubGV0IFNlcSA9IHJlcXVpcmUoXCIuL3NlcVwiKTtcblxuZnVuY3Rpb24gbWFrZUdmb3IoYWYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2ZvcigpIHtcbiAgICAgICAgbGV0IGZQb3MgPSAtMTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihhcmd1bWVudHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgZlBvcyA9IGk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZQb3MgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCb2R5IGZ1bmN0aW9uIGFyZ3VtZW50IGV4cGVjdGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZlBvcyA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2VxIGFyZ3VtZW50cyBleHBlY3RlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRoaXNBcmcgPSBhcmd1bWVudHNbZlBvc107XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gZlBvcyArIDEgJiYgXy5pc09iamVjdChmUG9zICsgMSkpIHtcbiAgICAgICAgICAgIHRoaXNBcmcgPSBhcmd1bWVudHNbZlBvcyArIDFdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzZXE7XG4gICAgICAgIGlmIChmUG9zID09PSAxKSB7XG4gICAgICAgICAgICBzZXEgPSBuZXcgU2VxKGFyZ3VtZW50c1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZlBvcyA9PT0gMikge1xuICAgICAgICAgICAgc2VxID0gbmV3IFNlcShhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG51bWJlciBvZiBTZXEgYXJndW1lbnRzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBzZXEuaXNHRm9yID0gdHJ1ZTtcbiAgICAgICAgYWYuX2dmb3JUb2dnbGUoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGFyZ3VtZW50c1tmUG9zXS5jYWxsKHRoaXNBcmcsIHNlcSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBhZi5fZ2ZvclRvZ2dsZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1ha2VHZm9yOyJdfQ==
