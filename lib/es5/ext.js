"use strict";
"use strict";
var Bluebird = require("bluebird");
var _ = require("lodash");
function synchronify(fire, f) {
  return function() {
    var err;
    var res;
    var cb = function(e, r) {
      err = e;
      res = r;
      done = true;
    };
    var done = false;
    var args = _.toArray(arguments).concat(cb);
    f.apply(this, args);
    while (!done)
      fire._doEvents();
    if (err)
      throw err;
    return res;
  };
}
function installAsyncAndSync(fire, obj, name) {
  if (_.isUndefined(name)) {
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (_.keys(obj))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var key = $__1.value;
        {
          installAsyncAndSync(fire, obj, key);
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
    return;
  }
  var f = obj[name];
  if (_.isFunction(f)) {
    if (!_.isFunction(obj[name + "Async"])) {
      obj[name + "Async"] = function() {
        var self = this;
        var args = _.toArray(arguments);
        return new Bluebird(function(resolve, reject) {
          var cb = function(e, r) {
            if (e) {
              reject(e);
            } else {
              resolve(r);
            }
          };
          args.push(cb);
          f.apply(self, args);
        });
      };
    }
    obj[name + "Sync"] = synchronify(fire, f);
  }
}
function Ext(self) {
  installAsyncAndSync(self, self);
  installAsyncAndSync(self, self.AFArray);
  installAsyncAndSync(self, self.AFArray.prototype);
  _.extend(self, {
    end: -1,
    types: {
      dtype: require("./dtype"),
      dDype: require("./dtype"),
      source: require("./source")
    },
    Dim4: require("./dim4"),
    Seq: require("./seq"),
    Complex: require("./complex"),
    getDevices: function() {
      var current = this.getDevice();
      try {
        var count = this.getDeviceCount();
        var result = [];
        for (var i = 0; i < count; i++) {
          this.setDevice(i);
          var info = this.deviceInfo();
          info.id = i;
          result.push(info);
        }
        return result;
      } finally {
        this.setDevice(current);
      }
    }
  });
}
module.exports = Ext;
//# sourceMappingURL=data:application/json;base64,
