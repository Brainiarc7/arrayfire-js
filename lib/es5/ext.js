"use strict";
var Bluebird = require("bluebird");
var _ = require("lodash");
var async = Bluebird.coroutine;
var retryCount = 5;
var gcTime = 1000;
function isOutOfMemoryError(e) {
  return e.message.indexOf("998") > 0;
}
function invokeGC(af) {
  af.gc(gcTime);
}
function synchronify(af, f) {
  return function() {
    var err;
    var res;
    var done;
    var cb = function(e, r) {
      err = e;
      res = r;
      done = true;
    };
    var args = _.toArray(arguments).concat(cb);
    for (var i = 0; i < retryCount; i++) {
      done = false;
      f.apply(this, args);
      while (!done)
        af._doEvents();
      if (err) {
        if (!isOutOfMemoryError(err)) {
          throw err;
        } else {
          invokeGC(af);
        }
      }
    }
    if (err)
      throw err;
    return res;
  };
}
function installAsyncAndSync(af, obj, name) {
  if (_.isUndefined(name)) {
    var $__4 = true;
    var $__5 = false;
    var $__6 = undefined;
    try {
      for (var $__2 = void 0,
          $__1 = (_.keys(obj))[Symbol.iterator](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
        var key = $__2.value;
        {
          installAsyncAndSync(af, obj, key);
        }
      }
    } catch ($__7) {
      $__5 = true;
      $__6 = $__7;
    } finally {
      try {
        if (!$__4 && $__1.return != null) {
          $__1.return();
        }
      } finally {
        if ($__5) {
          throw $__6;
        }
      }
    }
    return;
  }
  if (name !== "AFArray") {
    var f = obj[name];
    if (_.isFunction(f)) {
      if (!_.isFunction(obj[name + "Async"])) {
        obj[name + "Async"] = async($traceurRuntime.initGeneratorFunction(function $__8() {
          var self,
              args,
              call,
              err,
              i,
              $__9,
              $__10,
              e;
          var $arguments = arguments;
          return $traceurRuntime.createGeneratorInstance(function($ctx) {
            while (true)
              switch ($ctx.state) {
                case 0:
                  self = this;
                  args = _.toArray($arguments);
                  call = function() {
                    return new Bluebird(function(resolve, reject) {
                      var cb = function(e, r) {
                        if (e) {
                          reject(e);
                        } else {
                          resolve(r);
                        }
                      };
                      args.push(cb);
                      f.apply(self, args);
                    });
                  };
                  err = null;
                  $ctx.state = 22;
                  break;
                case 22:
                  i = 0;
                  $ctx.state = 20;
                  break;
                case 20:
                  $ctx.state = (i < retryCount) ? 11 : 18;
                  break;
                case 14:
                  i++;
                  $ctx.state = 20;
                  break;
                case 11:
                  $ctx.pushTry(9, null);
                  $ctx.state = 12;
                  break;
                case 12:
                  $__9 = call();
                  $ctx.state = 6;
                  break;
                case 6:
                  $ctx.state = 2;
                  return $__9;
                case 2:
                  $__10 = $ctx.sent;
                  $ctx.state = 4;
                  break;
                case 4:
                  $ctx.returnValue = $__10;
                  $ctx.state = -2;
                  break;
                case 8:
                  $ctx.popTry();
                  $ctx.state = 14;
                  break;
                case 9:
                  $ctx.popTry();
                  $ctx.maybeUncatchable();
                  e = $ctx.storedException;
                  $ctx.state = 15;
                  break;
                case 15:
                  if (!isOutOfMemoryError(e)) {
                    throw e;
                  }
                  invokeGC(af);
                  err = e;
                  $ctx.state = 14;
                  break;
                case 18:
                  throw err;
                  $ctx.state = -2;
                  break;
                default:
                  return $ctx.end();
              }
          }, $__8, this);
        }));
      }
      if (!_.isFunction(obj[name + "Sync"])) {
        obj[name + "Sync"] = synchronify(af, f);
      }
      obj[name] = function() {
        var err = null;
        for (var i = 0; i < retryCount; i++) {
          try {
            return f.apply(this, arguments);
          } catch (e) {
            if (!isOutOfMemoryError(e)) {
              throw e;
            }
            invokeGC(af);
            err = e;
          }
        }
        throw err;
      };
    }
  }
}
function ext(af) {
  installAsyncAndSync(af, af);
  installAsyncAndSync(af, af.AFArray);
  installAsyncAndSync(af, af.AFArray.prototype);
  _.extend(af, {
    end: -1,
    span: null,
    all: -1,
    dtype: require("./dtype"),
    dType: require("./dtype"),
    source: require("./source"),
    matchType: require("./matchType"),
    cSpace: require("./cSpace"),
    CSpace: require("./cSpace"),
    connectivity: require("./connectivity"),
    borderType: require("./borderType"),
    interpType: require("./interpType"),
    matProp: require("./matProp"),
    normType: require("./normType"),
    convMode: require("./convMode"),
    convDomain: require("./convDomain"),
    Dim4: require("./dim4"),
    Seq: require("./seq"),
    Complex: require("./complex"),
    Row: require("./row"),
    Col: require("./col"),
    Rows: require("./rows"),
    Cols: require("./cols"),
    getDevices: function() {
      var current = this.getDevice();
      try {
        var count = this.getDeviceCount();
        var result = [];
        for (var i = 0; i < count; i++) {
          this.setDevice(i);
          var info = this.deviceInfo();
          info.id = i;
          result.push(info);
        }
        return result;
      } finally {
        this.setDevice(current);
      }
    },
    gfor: require("./makeGfor")(af)
  });
}
module.exports = ext;
//# sourceMappingURL=data:application/json;base64,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b3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgQXJyYXlGaXJlXG5Db3B5cmlnaHQgKGMpIDIwMTUgR8OhYm9yIE1lesWRIGFrYSB1bmJvcm5jaGlra2VuIChnYWJvci5tZXpvQG91dGxvb2suY29tKVxuQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbixcbmFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yXG4gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIEFycmF5RmlyZSBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG5USElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbkFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG5XQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG5ESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUlxuQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4oSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG5MT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT05cbkFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4oSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5cInVzZSBzdHJpY3RcIjtcblxubGV0IEJsdWViaXJkID0gcmVxdWlyZShcImJsdWViaXJkXCIpO1xubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xubGV0IGFzeW5jID0gQmx1ZWJpcmQuY29yb3V0aW5lO1xuXG5jb25zdCByZXRyeUNvdW50ID0gNTtcbmNvbnN0IGdjVGltZSA9IDEwMDA7XG5cbmZ1bmN0aW9uIGlzT3V0T2ZNZW1vcnlFcnJvcihlKSB7XG4gICAgcmV0dXJuIGUubWVzc2FnZS5pbmRleE9mKFwiOTk4XCIpID4gMDtcbn1cblxuZnVuY3Rpb24gaW52b2tlR0MoYWYpIHtcbiAgICBhZi5nYyhnY1RpbWUpO1xufVxuXG5mdW5jdGlvbiBzeW5jaHJvbmlmeShhZiwgZikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlcnI7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHZhciBkb25lO1xuICAgICAgICBsZXQgY2IgPSBmdW5jdGlvbiAoZSwgcikge1xuICAgICAgICAgICAgZXJyID0gZTtcbiAgICAgICAgICAgIHJlcyA9IHI7XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgYXJncyA9IF8udG9BcnJheShhcmd1bWVudHMpLmNvbmNhdChjYik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXRyeUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGYuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB3aGlsZSAoIWRvbmUpIGFmLl9kb0V2ZW50cygpO1xuXG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc091dE9mTWVtb3J5RXJyb3IoZXJyKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpbnZva2VHQyhhZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaW5zdGFsbEFzeW5jQW5kU3luYyhhZiwgb2JqLCBuYW1lKSB7XG4gICAgaWYgKF8uaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IG9mIF8ua2V5cyhvYmopKSB7XG4gICAgICAgICAgICBpbnN0YWxsQXN5bmNBbmRTeW5jKGFmLCBvYmosIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChuYW1lICE9PSBcIkFGQXJyYXlcIikge1xuICAgICAgICBsZXQgZiA9IG9ialtuYW1lXTtcbiAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihmKSkge1xuICAgICAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24ob2JqW25hbWUgKyBcIkFzeW5jXCJdKSkge1xuICAgICAgICAgICAgICAgIG9ialtuYW1lICsgXCJBc3luY1wiXSA9IGFzeW5jKGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFyZ3MgPSBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJsdWViaXJkKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2IgPSBmdW5jdGlvbiAoZSwgcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGNiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXRyeUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkIGNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc091dE9mTWVtb3J5RXJyb3IoZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tlR0MoYWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyciA9IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24ob2JqW25hbWUgKyBcIlN5bmNcIl0pKSB7XG4gICAgICAgICAgICAgICAgb2JqW25hbWUgKyBcIlN5bmNcIl0gPSBzeW5jaHJvbmlmeShhZiwgZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmpbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVyciA9IG51bGw7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXRyeUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNPdXRPZk1lbW9yeUVycm9yKGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZUdDKGFmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyciA9IGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZXh0KGFmKSB7XG4gICAgaW5zdGFsbEFzeW5jQW5kU3luYyhhZiwgYWYpO1xuICAgIGluc3RhbGxBc3luY0FuZFN5bmMoYWYsIGFmLkFGQXJyYXkpO1xuICAgIGluc3RhbGxBc3luY0FuZFN5bmMoYWYsIGFmLkFGQXJyYXkucHJvdG90eXBlKTtcblxuICAgIF8uZXh0ZW5kKGFmLCB7XG4gICAgICAgIGVuZDogLTEsXG4gICAgICAgIHNwYW46IG51bGwsXG4gICAgICAgIGFsbDogLTEsXG4gICAgICAgIGR0eXBlOiByZXF1aXJlKFwiLi9kdHlwZVwiKSxcbiAgICAgICAgZFR5cGU6IHJlcXVpcmUoXCIuL2R0eXBlXCIpLFxuICAgICAgICBzb3VyY2U6IHJlcXVpcmUoXCIuL3NvdXJjZVwiKSxcbiAgICAgICAgbWF0Y2hUeXBlOiByZXF1aXJlKFwiLi9tYXRjaFR5cGVcIiksXG4gICAgICAgIGNTcGFjZTogcmVxdWlyZShcIi4vY1NwYWNlXCIpLFxuICAgICAgICBDU3BhY2U6IHJlcXVpcmUoXCIuL2NTcGFjZVwiKSxcbiAgICAgICAgY29ubmVjdGl2aXR5OiByZXF1aXJlKFwiLi9jb25uZWN0aXZpdHlcIiksXG4gICAgICAgIGJvcmRlclR5cGU6IHJlcXVpcmUoXCIuL2JvcmRlclR5cGVcIiksXG4gICAgICAgIGludGVycFR5cGU6IHJlcXVpcmUoXCIuL2ludGVycFR5cGVcIiksXG4gICAgICAgIG1hdFByb3A6IHJlcXVpcmUoXCIuL21hdFByb3BcIiksXG4gICAgICAgIG5vcm1UeXBlOiByZXF1aXJlKFwiLi9ub3JtVHlwZVwiKSxcbiAgICAgICAgY29udk1vZGU6IHJlcXVpcmUoXCIuL2NvbnZNb2RlXCIpLFxuICAgICAgICBjb252RG9tYWluOiByZXF1aXJlKFwiLi9jb252RG9tYWluXCIpLFxuICAgICAgICBEaW00OiByZXF1aXJlKFwiLi9kaW00XCIpLFxuICAgICAgICBTZXE6IHJlcXVpcmUoXCIuL3NlcVwiKSxcbiAgICAgICAgQ29tcGxleDogcmVxdWlyZShcIi4vY29tcGxleFwiKSxcbiAgICAgICAgUm93OiByZXF1aXJlKFwiLi9yb3dcIiksXG4gICAgICAgIENvbDogcmVxdWlyZShcIi4vY29sXCIpLFxuICAgICAgICBSb3dzOiByZXF1aXJlKFwiLi9yb3dzXCIpLFxuICAgICAgICBDb2xzOiByZXF1aXJlKFwiLi9jb2xzXCIpLFxuICAgICAgICBnZXREZXZpY2VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuZ2V0RGV2aWNlKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IHRoaXMuZ2V0RGV2aWNlQ291bnQoKTtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RGV2aWNlKGkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5mbyA9IHRoaXMuZGV2aWNlSW5mbygpO1xuICAgICAgICAgICAgICAgICAgICBpbmZvLmlkID0gaTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldERldmljZShjdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2ZvcjogcmVxdWlyZShcIi4vbWFrZUdmb3JcIikoYWYpXG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXh0OyJdfQ==
