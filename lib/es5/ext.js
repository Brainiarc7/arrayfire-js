"use strict";
"use strict";
var Bluebird = require("bluebird");
var _ = require("lodash");
var async = Bluebird.coroutine;
var retryCount = 5;
var gcTime = 1000;
function isOutOfMemoryError(e) {
  return e.message.indexOf("998") > 0;
}
function invokeGC(af) {
  af.gc(gcTime);
}
function synchronify(af, f) {
  return function() {
    var err;
    var res;
    var done;
    var cb = function(e, r) {
      err = e;
      res = r;
      done = true;
    };
    var args = _.toArray(arguments).concat(cb);
    for (var i = 0; i < retryCount; i++) {
      done = false;
      f.apply(this, args);
      while (!done)
        af._doEvents();
      if (err) {
        if (!isOutOfMemoryError(err)) {
          throw err;
        } else {
          invokeGC(af);
        }
      }
    }
    if (err)
      throw err;
    return res;
  };
}
function installAsyncAndSync(af, obj, name) {
  if (_.isUndefined(name)) {
    var $__3 = true;
    var $__4 = false;
    var $__5 = undefined;
    try {
      for (var $__1 = void 0,
          $__0 = (_.keys(obj))[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
        var key = $__1.value;
        {
          installAsyncAndSync(af, obj, key);
        }
      }
    } catch ($__6) {
      $__4 = true;
      $__5 = $__6;
    } finally {
      try {
        if (!$__3 && $__0.return != null) {
          $__0.return();
        }
      } finally {
        if ($__4) {
          throw $__5;
        }
      }
    }
    return;
  }
  if (name !== "AFArray") {
    var f = obj[name];
    if (_.isFunction(f)) {
      if (!_.isFunction(obj[name + "Async"])) {
        obj[name + "Async"] = async($traceurRuntime.initGeneratorFunction(function $__7() {
          var self,
              args,
              call,
              err,
              i,
              $__8,
              $__9,
              e;
          var $arguments = arguments;
          return $traceurRuntime.createGeneratorInstance(function($ctx) {
            while (true)
              switch ($ctx.state) {
                case 0:
                  self = this;
                  args = _.toArray($arguments);
                  call = function() {
                    return new Bluebird(function(resolve, reject) {
                      var cb = function(e, r) {
                        if (e) {
                          reject(e);
                        } else {
                          resolve(r);
                        }
                      };
                      args.push(cb);
                      f.apply(self, args);
                    });
                  };
                  err = null;
                  $ctx.state = 22;
                  break;
                case 22:
                  i = 0;
                  $ctx.state = 20;
                  break;
                case 20:
                  $ctx.state = (i < retryCount) ? 11 : 18;
                  break;
                case 14:
                  i++;
                  $ctx.state = 20;
                  break;
                case 11:
                  $ctx.pushTry(9, null);
                  $ctx.state = 12;
                  break;
                case 12:
                  $__8 = call();
                  $ctx.state = 6;
                  break;
                case 6:
                  $ctx.state = 2;
                  return $__8;
                case 2:
                  $__9 = $ctx.sent;
                  $ctx.state = 4;
                  break;
                case 4:
                  $ctx.returnValue = $__9;
                  $ctx.state = -2;
                  break;
                case 8:
                  $ctx.popTry();
                  $ctx.state = 14;
                  break;
                case 9:
                  $ctx.popTry();
                  $ctx.maybeUncatchable();
                  e = $ctx.storedException;
                  $ctx.state = 15;
                  break;
                case 15:
                  if (!isOutOfMemoryError(e)) {
                    throw e;
                  }
                  invokeGC(af);
                  err = e;
                  $ctx.state = 14;
                  break;
                case 18:
                  throw err;
                  $ctx.state = -2;
                  break;
                default:
                  return $ctx.end();
              }
          }, $__7, this);
        }));
      }
      if (!_.isFunction(obj[name + "Sync"])) {
        obj[name + "Sync"] = synchronify(af, f);
      }
      obj[name] = function() {
        var err = null;
        for (var i = 0; i < retryCount; i++) {
          try {
            return f.apply(this, arguments);
          } catch (e) {
            if (!isOutOfMemoryError(e)) {
              throw e;
            }
            invokeGC(af);
            err = e;
          }
        }
        throw err;
      };
    }
  }
}
function ext(af) {
  installAsyncAndSync(af, af);
  installAsyncAndSync(af, af.AFArray);
  installAsyncAndSync(af, af.AFArray.prototype);
  _.extend(af, {
    end: -1,
    span: null,
    all: -1,
    dtype: require("./dtype"),
    dType: require("./dtype"),
    source: require("./source"),
    matchType: require("./matchType"),
    cSpace: require("./cSpace"),
    CSpace: require("./cSpace"),
    connectivity: require("./connectivity"),
    borderType: require("./borderType"),
    interpType: require("./interpType"),
    matProp: require("./matProp"),
    normType: require("./normType"),
    convMode: require("./convMode"),
    convDomain: require("./convDomain"),
    Dim4: require("./dim4"),
    Seq: require("./seq"),
    Complex: require("./complex"),
    Row: require("./row"),
    Col: require("./col"),
    Rows: require("./rows"),
    Cols: require("./cols"),
    getDevices: function() {
      var current = this.getDevice();
      try {
        var count = this.getDeviceCount();
        var result = [];
        for (var i = 0; i < count; i++) {
          this.setDevice(i);
          var info = this.deviceInfo();
          info.id = i;
          result.push(info);
        }
        return result;
      } finally {
        this.setDevice(current);
      }
    },
    gfor: require("./makeGfor")(af)
  });
}
module.exports = ext;
//# sourceMappingURL=data:application/json;base64,
