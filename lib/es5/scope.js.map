{"version":3,"names":[],"mappings":"","sources":["scope.js"],"sourcesContent":["\"use strict\";\nlet Bluebird = require(\"bluebird\");\nlet _ = require(\"lodash\");\n\nlet temporaries = [];\n\nfunction scope(f) {\n    if (_.isFunction(f)) {\n        scope.begin();\n        try {\n            let result = f.call(scope);\n            if (_.isObject(result) && _.isFunction(result.then)) {\n                return Bluebird.resolve(result)\n                    .then(function() {\n                        return scope;\n                    })\n                    .finally(function() {\n                        scope.end();\n                    });\n            }\n            else {\n                scope.end();\n                return scope;\n            }\n        }\n        catch(e) {\n            scope.end();\n            throw e;\n        }\n    }\n}\n\nscope.begin = function() {\n    temporaries.push(new Set());\n    return scope;\n};\n\nscope.end = function() {\n    if (temporaries.length) {\n        let set = temporaries[temporaries.length - 1];\n        temporaries.length--;\n        free(set);\n    }\n    return scope;\n};\n\nscope.register = function(array) {\n    if (temporaries.length && _.isObject(array) && _.isFunction(array.free)) {\n        let set = temporaries[temporaries.length - 1];\n        set.add(array);\n    }\n};\n\nscope.result = function(array) {\n    if (temporaries.length && _.isObject(array)) {\n        let set = temporaries[temporaries.length - 1];\n        set.delete(array);\n    }\n    return scope;\n};\n\nfunction free(arrays) {\n    for (let array of arrays.values()) {\n        array.free();\n    }\n}\n\nmodule.exports = scope;"],"file":"scope.js","sourceRoot":"/source/"}