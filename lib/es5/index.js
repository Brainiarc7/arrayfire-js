"use strict";
"use strict";
var _ = require("lodash");
var Ext = require("./ext");
var Bluebird = require("bluebird");
var entry = module.exports = function(id) {
  var did = _.isString(id) ? id.trim().toLowerCase() : null;
  did = did || "cpu";
  function createAF() {
    switch (did) {
      case "cpu":
        return require("bindings")("fire_js_CPU");
      case "cuda":
        return require("bindings")("fire_js_CUDA");
      case "opencl":
        return require("bindings")("fire_js_OpenCL");
      default:
        throw new Error("Platforms '" + id + "' is not supported.");
    }
  }
  var af = createAF();
  if (!af.__extended) {
    _.extend(af, new Ext(af));
    af.__extended = true;
  }
  return af;
};
entry.supportedPlatforms = function() {
  var platforms = [];
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (["CPU", "CUDA", "OpenCL"])[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var id = $__1.value;
      {
        try {
          var fire = entry(id);
          platforms.push(id);
        } catch (e) {}
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  return platforms;
};
//# sourceMappingURL=data:application/json;base64,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b0IsS0FBRyxDQUFDO0FBQ3hCLGNBQW9DLENBQUM7RUFDdkMsQ0FBRSxPQUFRO0FBQ1IsTUFBSTtBQUNGLFNBQUksS0FBaUIsR0FBSyxDQUFBLFdBQXVCLEdBQUssS0FBRyxDQUFHO0FBQzFELGtCQUF3QixBQUFDLEVBQUMsQ0FBQztNQUM3QjtBQUFBLElBQ0YsQ0FBRSxPQUFRO0FBQ1IsY0FBd0I7QUFDdEIsa0JBQXdCO01BQzFCO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxBQW9DSixPQUFPLFVBQVEsQ0FBQztBQUNwQixDQUFDO0FBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgMjAxNSBH77+9Ym9yIE1leu+/vSBha2EgdW5ib3JuY2hpa2tlblxuXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG5TZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG5saW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cblwidXNlIHN0cmljdFwiO1xuXG5sZXQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5sZXQgRXh0ID0gcmVxdWlyZShcIi4vZXh0XCIpO1xubGV0IEJsdWViaXJkID0gcmVxdWlyZShcImJsdWViaXJkXCIpO1xuXG5sZXQgZW50cnkgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgbGV0IGRpZCA9IF8uaXNTdHJpbmcoaWQpID8gaWQudHJpbSgpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xuICAgIGRpZCA9IGRpZCB8fCBcImNwdVwiO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFGKCkge1xuICAgICAgICBzd2l0Y2ggKGRpZCkge1xuICAgICAgICAgICAgY2FzZSBcImNwdVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1aXJlKFwiYmluZGluZ3NcIikoXCJmaXJlX2pzX0NQVVwiKTtcbiAgICAgICAgICAgIGNhc2UgXCJjdWRhXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCJiaW5kaW5nc1wiKShcImZpcmVfanNfQ1VEQVwiKTtcbiAgICAgICAgICAgIGNhc2UgXCJvcGVuY2xcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWlyZShcImJpbmRpbmdzXCIpKFwiZmlyZV9qc19PcGVuQ0xcIik7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsYXRmb3JtcyAnXCIgKyBpZCArIFwiJyBpcyBub3Qgc3VwcG9ydGVkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgYWYgPSBjcmVhdGVBRigpO1xuICAgIGlmICghYWYuX19leHRlbmRlZCkge1xuICAgICAgICBfLmV4dGVuZChhZiwgbmV3IEV4dChhZikpO1xuICAgICAgICBhZi5fX2V4dGVuZGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFmO1xufTtcblxuZW50cnkuc3VwcG9ydGVkUGxhdGZvcm1zID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHBsYXRmb3JtcyA9IFtdO1xuICAgIGZvciAobGV0IGlkIG9mIFtcIkNQVVwiLCBcIkNVREFcIiwgXCJPcGVuQ0xcIl0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBmaXJlID0gZW50cnkoaWQpO1xuICAgICAgICAgICAgcGxhdGZvcm1zLnB1c2goaWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGxhdGZvcm1zO1xufTsiXX0=
