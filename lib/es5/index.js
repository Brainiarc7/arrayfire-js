"use strict";
"use strict";
var _ = require("lodash");
var ext = require("./ext");
var Bluebird = require("bluebird");
var entry = module.exports = function(id) {
  var did = _.isString(id) ? id.trim().toLowerCase() : null;
  did = did || "cpu";
  function createAF() {
    switch (did) {
      case "cpu":
        return require("bindings")("arrayfire_js_CPU");
      case "cuda":
        return require("bindings")("arrayfire_js_CUDA");
      case "opencl":
        return require("bindings")("arrayfire_js_OpenCL");
      default:
        throw new Error("Platform '" + id + "' is not supported.");
    }
  }
  var af = createAF();
  if (!af.__extended) {
    ext(af);
    af.__extended = true;
  }
  return af;
};
entry.supportedPlatforms = function() {
  var platforms = [];
  var $__3 = true;
  var $__4 = false;
  var $__5 = undefined;
  try {
    for (var $__1 = void 0,
        $__0 = (["CPU", "CUDA", "OpenCL"])[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
      var id = $__1.value;
      {
        try {
          var fire = entry(id);
          platforms.push(id);
        } catch (e) {}
      }
    }
  } catch ($__6) {
    $__4 = true;
    $__5 = $__6;
  } finally {
    try {
      if (!$__3 && $__0.return != null) {
        $__0.return();
      }
    } finally {
      if ($__4) {
        throw $__5;
      }
    }
  }
  return platforms;
};
//# sourceMappingURL=data:application/json;base64,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Q0FBRSxPQUFRO0FBQ1IsTUFBSTtBQUNGLFNBQUksS0FBaUIsR0FBSyxDQUFBLFdBQXVCLEdBQUssS0FBRyxDQUFHO0FBQzFELGtCQUF3QixBQUFDLEVBQUMsQ0FBQztNQUM3QjtBQUFBLElBQ0YsQ0FBRSxPQUFRO0FBQ1IsY0FBd0I7QUFDdEIsa0JBQXdCO01BQzFCO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxBQW1ESixPQUFPLFVBQVEsQ0FBQztBQUNwQixDQUFDO0FBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoibGliL2VzNiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5Db3B5cmlnaHQgKGMpIDIwMTQtMjAxNSwgQXJyYXlGaXJlXG5Db3B5cmlnaHQgKGMpIDIwMTUgR8OhYm9yIE1lesWRIGFrYSB1bmJvcm5jaGlra2VuIChnYWJvci5tZXpvQG91dGxvb2suY29tKVxuQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbixcbmFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuXG4gKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiAgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yXG4gIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIEFycmF5RmlyZSBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbVxuICB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuXG5USElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkRcbkFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEXG5XQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFXG5ESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUlxuQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4oSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG5MT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT05cbkFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4oSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJU1xuU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5cInVzZSBzdHJpY3RcIjtcblxubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xubGV0IGV4dCA9IHJlcXVpcmUoXCIuL2V4dFwiKTtcbmxldCBCbHVlYmlyZCA9IHJlcXVpcmUoXCJibHVlYmlyZFwiKTtcblxubGV0IGVudHJ5ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpZCkge1xuICAgIGxldCBkaWQgPSBfLmlzU3RyaW5nKGlkKSA/IGlkLnRyaW0oKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICBkaWQgPSBkaWQgfHwgXCJjcHVcIjtcbiAgICBmdW5jdGlvbiBjcmVhdGVBRigpIHtcbiAgICAgICAgc3dpdGNoIChkaWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjcHVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVxdWlyZShcImJpbmRpbmdzXCIpKFwiYXJyYXlmaXJlX2pzX0NQVVwiKTtcbiAgICAgICAgICAgIGNhc2UgXCJjdWRhXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCJiaW5kaW5nc1wiKShcImFycmF5ZmlyZV9qc19DVURBXCIpO1xuICAgICAgICAgICAgY2FzZSBcIm9wZW5jbFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1aXJlKFwiYmluZGluZ3NcIikoXCJhcnJheWZpcmVfanNfT3BlbkNMXCIpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGF0Zm9ybSAnXCIgKyBpZCArIFwiJyBpcyBub3Qgc3VwcG9ydGVkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgYWYgPSBjcmVhdGVBRigpO1xuICAgIGlmICghYWYuX19leHRlbmRlZCkge1xuICAgICAgICBleHQoYWYpO1xuICAgICAgICBhZi5fX2V4dGVuZGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFmO1xufTtcblxuZW50cnkuc3VwcG9ydGVkUGxhdGZvcm1zID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHBsYXRmb3JtcyA9IFtdO1xuICAgIGZvciAobGV0IGlkIG9mIFtcIkNQVVwiLCBcIkNVREFcIiwgXCJPcGVuQ0xcIl0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBmaXJlID0gZW50cnkoaWQpO1xuICAgICAgICAgICAgcGxhdGZvcm1zLnB1c2goaWQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGxhdGZvcm1zO1xufTsiXX0=
