"use strict";
"use strict";
var assert = require("better-assert");
var _ = require("lodash");
var ref = require("ref");
var Bluebird = require("bluebird");
var async = Bluebird.coroutine;
function testPlatform(id) {
  if (process.env["TEST_" + id] === "1") {
    describe(id + " platform", function() {
      var fire = require("../..")(id);
      var AFArray = fire.AFArray;
      it("should export AFArray constructor", function() {
        assert(_.isFunction(AFArray));
      });
      it("should create empty", function() {
        var array = new AFArray();
        assert(_.isObject(array));
        assert(array.bytes() === 0);
        assert(array.elements() === 0);
        assert(array.isempty());
        assert(_.isFunction(array.host));
        assert(_.isFunction(array.hostAsync));
        assert(_.isUndefined(array.hostAsyncAsync));
        assert(_.isFunction(array.hostSync));
        assert(_.isUndefined(array.hostSyncAsync));
        assert(_.isUndefined(array.hostSyncSync));
        assert(_.isUndefined(array.hostAsyncSync));
      });
      it("should fail with one number argument", function() {
        try {
          var array = new AFArray(1);
          assert(false);
        } catch (e) {}
      });
      it("should create new one dimensional", function() {
        var array = new AFArray(10, fire.types.dtype.s32);
        assert(_.isObject(array));
        assert(array.bytes() === 10 * 4);
        assert(array.elements() === 10);
        assert(array.type() === fire.types.dtype.s32);
        assert(array.numdims() === 1);
        assert(array.dims(0) === 10);
        assert(array.dims(1) === 1);
        assert(array.dims(2) === 1);
        assert(array.dims(3) === 1);
        var dims = array.dims();
        assert(_.isObject(dims));
        assert(dims.elements === 10);
        assert(dims.ndims === 1);
        assert(dims.dims[0] === 10);
        assert(dims.dims[1] === 1);
        assert(dims.dims[2] === 1);
        assert(dims.dims[3] === 1);
        assert(array.isempty() === false);
        assert(array.isscalar() === false);
        assert(array.isvector() === true);
        assert(array.isrow() === false);
        assert(array.iscolumn() === true);
        assert(array.iscomplex() === false);
        assert(array.isreal() === true);
        assert(array.isdouble() === false);
        assert(array.issingle() === false);
        assert(array.isrealfloating() === false);
        assert(array.isfloating() === false);
        assert(array.isinteger() === true);
        assert(array.isbool() === false);
      });
      it("should create new two dimensional", function() {
        var array = new AFArray(10, 20, fire.types.dtype.f32);
        assert(_.isObject(array));
        assert(array.bytes() === 10 * 20 * 4);
        assert(array.elements() === 10 * 20);
        assert(array.type() === fire.types.dtype.f32);
        assert(array.numdims() === 2);
        assert(array.dims(0) === 10);
        assert(array.dims(1) === 20);
        assert(array.dims(2) === 1);
        assert(array.dims(3) === 1);
        var dims = array.dims();
        assert(_.isObject(dims));
        assert(dims.elements === 10 * 20);
        assert(dims.ndims === 2);
        assert(dims.dims[0] === 10);
        assert(dims.dims[1] === 20);
        assert(dims.dims[2] === 1);
        assert(dims.dims[3] === 1);
        assert(array.isempty() === false);
        assert(array.isscalar() === false);
        assert(array.isvector() === false);
        assert(array.isrow() === false);
        assert(array.iscolumn() === false);
        assert(array.iscomplex() === false);
        assert(array.isreal() === true);
        assert(array.isdouble() === false);
        assert(array.issingle() === true);
        assert(array.isrealfloating() === true);
        assert(array.isfloating() === true);
        assert(array.isinteger() === false);
        assert(array.isbool() === false);
      });
      it("should create new three dimensional", function() {
        var array = new AFArray(10, 20, 30, fire.types.dtype.f32);
        assert(_.isObject(array));
        assert(array.bytes() === 10 * 20 * 30 * 4);
        assert(array.elements() === 10 * 20 * 30);
        assert(array.type() === fire.types.dtype.f32);
        assert(array.numdims() === 3);
        assert(array.dims(0) === 10);
        assert(array.dims(1) === 20);
        assert(array.dims(2) === 30);
        assert(array.dims(3) === 1);
        var dims = array.dims();
        assert(_.isObject(dims));
        assert(dims.elements === 10 * 20 * 30);
        assert(dims.ndims === 3);
        assert(dims.dims[0] === 10);
        assert(dims.dims[1] === 20);
        assert(dims.dims[2] === 30);
        assert(dims.dims[3] === 1);
        assert(array.isempty() === false);
        assert(array.isscalar() === false);
        assert(array.isvector() === false);
        assert(array.isrow() === false);
        assert(array.iscolumn() === false);
        assert(array.iscomplex() === false);
        assert(array.isreal() === true);
        assert(array.isdouble() === false);
        assert(array.issingle() === true);
        assert(array.isrealfloating() === true);
        assert(array.isfloating() === true);
        assert(array.isinteger() === false);
        assert(array.isbool() === false);
      });
      function verify4(array) {
        assert(_.isObject(array));
        assert(array.bytes() === 10 * 20 * 30 * 40 * 4);
        assert(array.elements() === 10 * 20 * 30 * 40);
        assert(array.type() === fire.types.dtype.f32);
        assert(array.numdims() === 4);
        assert(array.dims(0) === 10);
        assert(array.dims(1) === 20);
        assert(array.dims(2) === 30);
        assert(array.dims(3) === 40);
        var dims = array.dims();
        assert(_.isObject(dims));
        assert(dims.elements === 10 * 20 * 30 * 40);
        assert(dims.ndims === 4);
        assert(dims.dims[0] === 10);
        assert(dims.dims[1] === 20);
        assert(dims.dims[2] === 30);
        assert(dims.dims[3] === 40);
        assert(array.isempty() === false);
        assert(array.isscalar() === false);
        assert(array.isvector() === false);
        assert(array.isrow() === false);
        assert(array.iscolumn() === false);
        assert(array.iscomplex() === false);
        assert(array.isreal() === true);
        assert(array.isdouble() === false);
        assert(array.issingle() === true);
        assert(array.isrealfloating() === true);
        assert(array.isfloating() === true);
        assert(array.isinteger() === false);
        assert(array.isbool() === false);
      }
      it("should create new four dimensional", function() {
        var array = new AFArray(10, 20, 30, 40, fire.types.dtype.f32);
        verify4(array);
      });
      it("should create new four dimensional from dim4", function() {
        var array = new AFArray({dims: [10, 20, 30, 40]}, fire.types.dtype.f32);
        verify4(array);
      });
      it("should create new four dimensional from dim4 array", function() {
        var array = new AFArray([10, 20, 30, 40], fire.types.dtype.f32);
        verify4(array);
      });
      it("should initialize from buffer, copyable, and readable - asynchronously w/ generators", function(done) {
        var f = async($traceurRuntime.initGeneratorFunction(function $__8() {
          var int,
              count,
              buff,
              v,
              array,
              buff2,
              v$__0,
              v1,
              v2,
              array2,
              buff3,
              v$__1,
              v1$__2,
              v2$__3;
          return $traceurRuntime.createGeneratorInstance(function($ctx) {
            while (true)
              switch ($ctx.state) {
                case 0:
                  int = ref.types.int;
                  count = 10;
                  buff = new Buffer(int.size * count);
                  for (v = 0; v < count; v++) {
                    int.set(buff, v * int.size, v * v);
                  }
                  assert(_.isFunction(AFArray.create));
                  assert(_.isFunction(AFArray.createAsync));
                  $ctx.state = 14;
                  break;
                case 14:
                  $ctx.state = 2;
                  return AFArray.createAsync(count, fire.types.dtype.s32, buff);
                case 2:
                  array = $ctx.sent;
                  $ctx.state = 4;
                  break;
                case 4:
                  assert(array.bytes() === count * int.size);
                  assert(array.type() === fire.types.dtype.s32);
                  buff2 = new Buffer(int.size * count);
                  $ctx.state = 16;
                  break;
                case 16:
                  $ctx.state = 6;
                  return array.hostAsync(buff2);
                case 6:
                  $ctx.maybeThrow();
                  $ctx.state = 8;
                  break;
                case 8:
                  for (v$__0 = 0; v$__0 < count; v$__0++) {
                    v1 = int.get(buff, v$__0 * int.size);
                    v2 = int.get(buff2, v$__0 * int.size);
                    assert(v1 === v2);
                    assert(v1 === v$__0 * v$__0);
                  }
                  array2 = array.copy();
                  assert(array2 instanceof AFArray);
                  assert(array2.bytes() === array.bytes());
                  $ctx.state = 18;
                  break;
                case 18:
                  $ctx.state = 10;
                  return array2.hostAsync();
                case 10:
                  buff3 = $ctx.sent;
                  $ctx.state = 12;
                  break;
                case 12:
                  assert(buff3 instanceof Buffer);
                  assert(buff3.length === int.size * count);
                  for (v$__1 = 0; v$__1 < count; v$__1++) {
                    v1$__2 = int.get(buff, v$__1 * int.size);
                    v2$__3 = int.get(buff3, v$__1 * int.size);
                    assert(v1$__2 === v2$__3);
                    assert(v1$__2 === v$__1 * v$__1);
                  }
                  $ctx.state = -2;
                  break;
                default:
                  return $ctx.end();
              }
          }, $__8, this);
        }));
        f().nodeify(done);
      });
      it("should initialize from buffer, copyable, and readable - synchronously (blocking)", function() {
        var int = ref.types.int;
        var count = 10;
        var buff = new Buffer(int.size * count);
        for (var v = 0; v < count; v++) {
          int.set(buff, v * int.size, v * v);
        }
        assert(_.isFunction(AFArray.create));
        assert(_.isFunction(AFArray.createSync));
        var array = AFArray.createSync(count, fire.types.dtype.s32, buff);
        assert(array.bytes() === count * int.size);
        assert(array.type() === fire.types.dtype.s32);
        var buff2 = new Buffer(int.size * count);
        array.hostSync(buff2);
        for (var v$__4 = 0; v$__4 < count; v$__4++) {
          var v1 = int.get(buff, v$__4 * int.size);
          var v2 = int.get(buff2, v$__4 * int.size);
          assert(v1 === v2);
          assert(v1 === v$__4 * v$__4);
        }
        var array2 = array.copy();
        assert(array2 instanceof AFArray);
        assert(array2.bytes() === array.bytes());
        var buff3 = array2.hostSync();
        assert(buff3 instanceof Buffer);
        assert(buff3.length === int.size * count);
        for (var v$__5 = 0; v$__5 < count; v$__5++) {
          var v1$__6 = int.get(buff, v$__5 * int.size);
          var v2$__7 = int.get(buff3, v$__5 * int.size);
          assert(v1$__6 === v2$__7);
          assert(v1$__6 === v$__5 * v$__5);
        }
      });
      it("should be tests for assignment operators", function() {
        console.log(("TODO: implement array assignment operator tests for " + id + "\n"));
      });
      it("should be tests for indexing operators", function() {
        console.log(("TODO: implement array indexing operator tests for " + id + "\n"));
      });
      it("should be tests for row", function() {
        console.log(("TODO: implement array row test for " + id + "\n"));
      });
      it("should be tests for col", function() {
        console.log(("TODO: implement array col test for " + id + "\n"));
      });
      it("should be tests for slice", function() {
        console.log(("TODO: implement array slice test for " + id + "\n"));
      });
      it("should be tests for rows", function() {
        console.log(("TODO: implement array rows test for " + id + "\n"));
      });
      it("should be tests for cols", function() {
        console.log(("TODO: implement array cols test for " + id + "\n"));
      });
      it("should be tests for slices", function() {
        console.log(("TODO: implement array slices test for " + id + "\n"));
      });
      it("should be tests for as", function() {
        console.log(("TODO: implement array as test for " + id + "\n"));
      });
      it("should be tests for arithmetic operators", function() {
        console.log(("TODO: implement array arithmetic operator tests for " + id + "\n"));
      });
      it("should be tests for logical operators", function() {
        console.log(("TODO: implement array logical operator tests for " + id + "\n"));
      });
    });
  }
}
describe("AFArray class and methods", function() {
  testPlatform("CPU");
  testPlatform("OpenCL");
  testPlatform("CUDA");
});
//# sourceMappingURL=data:application/json;base64,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QUFDO0FBQ3ZCLGFBQUssQUFBQyxDQUFDLENBQUEsU0FBUyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQztBQUN4QixhQUFLLEFBQUMsQ0FBQyxJQUFHLFNBQVMsSUFBTSxHQUFDLENBQUMsQ0FBQztBQUM1QixhQUFLLEFBQUMsQ0FBQyxJQUFHLE1BQU0sSUFBTSxFQUFBLENBQUMsQ0FBQztBQUN4QixhQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsSUFBTSxHQUFDLENBQUMsQ0FBQztBQUMzQixhQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsSUFBTSxFQUFBLENBQUMsQ0FBQztBQUMxQixhQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsSUFBTSxFQUFBLENBQUMsQ0FBQztBQUMxQixhQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsSUFBTSxFQUFBLENBQUMsQ0FBQztBQUMxQixhQUFLLEFBQUMsQ0FBQyxLQUFJLFFBQVEsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNqQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNsQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxLQUFHLENBQUMsQ0FBQztBQUNqQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLE1BQU0sQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUMvQixhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxLQUFHLENBQUMsQ0FBQztBQUNqQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFVBQVUsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNuQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLE9BQU8sQUFBQyxFQUFDLENBQUEsR0FBTSxLQUFHLENBQUMsQ0FBQztBQUMvQixhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNsQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNsQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLGVBQWUsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUN4QyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFdBQVcsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNwQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFVBQVUsQUFBQyxFQUFDLENBQUEsR0FBTSxLQUFHLENBQUMsQ0FBQztBQUNsQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLE9BQU8sQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztNQUNwQyxDQUFDLENBQUM7QUFFRixPQUFDLEFBQUMsQ0FBQyxtQ0FBa0MsQ0FBRyxVQUFTLEFBQUQsQ0FBRztBQUMvQyxBQUFJLFVBQUEsQ0FBQSxLQUFJLEVBQUksSUFBSSxRQUFNLEFBQUMsQ0FBQyxFQUFDLENBQUcsR0FBQyxDQUFHLENBQUEsSUFBRyxNQUFNLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDckQsYUFBSyxBQUFDLENBQUMsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLGFBQUssQUFBQyxDQUFDLEtBQUksTUFBTSxBQUFDLEVBQUMsQ0FBQSxHQUFNLENBQUEsRUFBQyxFQUFJLEdBQUMsQ0FBQSxDQUFJLEVBQUEsQ0FBQyxDQUFDO0FBQ3JDLGFBQUssQUFBQyxDQUFDLEtBQUksU0FBUyxBQUFDLEVBQUMsQ0FBQSxHQUFNLENBQUEsRUFBQyxFQUFJLEdBQUMsQ0FBQyxDQUFDO0FBQ3BDLGFBQUssQUFBQyxDQUFDLEtBQUksS0FBSyxBQUFDLEVBQUMsQ0FBQSxHQUFNLENBQUEsSUFBRyxNQUFNLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDN0MsYUFBSyxBQUFDLENBQUMsS0FBSSxRQUFRLEFBQUMsRUFBQyxDQUFBLEdBQU0sRUFBQSxDQUFDLENBQUM7QUFDN0IsYUFBSyxBQUFDLENBQUMsS0FBSSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxHQUFNLEdBQUMsQ0FBQyxDQUFDO0FBQzVCLGFBQUssQUFBQyxDQUFDLEtBQUksS0FBSyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsR0FBTSxHQUFDLENBQUMsQ0FBQztBQUM1QixhQUFLLEFBQUMsQ0FBQyxLQUFJLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLEdBQU0sRUFBQSxDQUFDLENBQUM7QUFDM0IsYUFBSyxBQUFDLENBQUMsS0FBSSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxHQUFNLEVBQUEsQ0FBQyxDQUFDO0FBQzNCLEFBQUksVUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLEtBQUksS0FBSyxBQUFDLEVBQUMsQ0FBQztBQUN2QixhQUFLLEFBQUMsQ0FBQyxDQUFBLFNBQVMsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUM7QUFDeEIsYUFBSyxBQUFDLENBQUMsSUFBRyxTQUFTLElBQU0sQ0FBQSxFQUFDLEVBQUksR0FBQyxDQUFDLENBQUM7QUFDakMsYUFBSyxBQUFDLENBQUMsSUFBRyxNQUFNLElBQU0sRUFBQSxDQUFDLENBQUM7QUFDeEIsYUFBSyxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLElBQU0sR0FBQyxDQUFDLENBQUM7QUFDM0IsYUFBSyxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLElBQU0sR0FBQyxDQUFDLENBQUM7QUFDM0IsYUFBSyxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLElBQU0sRUFBQSxDQUFDLENBQUM7QUFDMUIsYUFBSyxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLElBQU0sRUFBQSxDQUFDLENBQUM7QUFDMUIsYUFBSyxBQUFDLENBQUMsS0FBSSxRQUFRLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDakMsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbEMsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbEMsYUFBSyxBQUFDLENBQUMsS0FBSSxNQUFNLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDL0IsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbEMsYUFBSyxBQUFDLENBQUMsS0FBSSxVQUFVLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbkMsYUFBSyxBQUFDLENBQUMsS0FBSSxPQUFPLEFBQUMsRUFBQyxDQUFBLEdBQU0sS0FBRyxDQUFDLENBQUM7QUFDL0IsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbEMsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sS0FBRyxDQUFDLENBQUM7QUFDakMsYUFBSyxBQUFDLENBQUMsS0FBSSxlQUFlLEFBQUMsRUFBQyxDQUFBLEdBQU0sS0FBRyxDQUFDLENBQUM7QUFDdkMsYUFBSyxBQUFDLENBQUMsS0FBSSxXQUFXLEFBQUMsRUFBQyxDQUFBLEdBQU0sS0FBRyxDQUFDLENBQUM7QUFDbkMsYUFBSyxBQUFDLENBQUMsS0FBSSxVQUFVLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbkMsYUFBSyxBQUFDLENBQUMsS0FBSSxPQUFPLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7TUFDcEMsQ0FBQyxDQUFDO0FBRUYsT0FBQyxBQUFDLENBQUMscUNBQW9DLENBQUcsVUFBUyxBQUFELENBQUc7QUFDakQsQUFBSSxVQUFBLENBQUEsS0FBSSxFQUFJLElBQUksUUFBTSxBQUFDLENBQUMsRUFBQyxDQUFHLEdBQUMsQ0FBRyxHQUFDLENBQUcsQ0FBQSxJQUFHLE1BQU0sTUFBTSxJQUFJLENBQUMsQ0FBQztBQUN6RCxhQUFLLEFBQUMsQ0FBQyxDQUFBLFNBQVMsQUFBQyxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUM7QUFDekIsYUFBSyxBQUFDLENBQUMsS0FBSSxNQUFNLEFBQUMsRUFBQyxDQUFBLEdBQU0sQ0FBQSxFQUFDLEVBQUksR0FBQyxDQUFBLENBQUksR0FBQyxDQUFBLENBQUksRUFBQSxDQUFDLENBQUM7QUFDMUMsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sQ0FBQSxFQUFDLEVBQUksR0FBQyxDQUFBLENBQUksR0FBQyxDQUFDLENBQUM7QUFDekMsYUFBSyxBQUFDLENBQUMsS0FBSSxLQUFLLEFBQUMsRUFBQyxDQUFBLEdBQU0sQ0FBQSxJQUFHLE1BQU0sTUFBTSxJQUFJLENBQUMsQ0FBQztBQUM3QyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFFBQVEsQUFBQyxFQUFDLENBQUEsR0FBTSxFQUFBLENBQUMsQ0FBQztBQUM3QixhQUFLLEFBQUMsQ0FBQyxLQUFJLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLEdBQU0sR0FBQyxDQUFDLENBQUM7QUFDNUIsYUFBSyxBQUFDLENBQUMsS0FBSSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxHQUFNLEdBQUMsQ0FBQyxDQUFDO0FBQzVCLGFBQUssQUFBQyxDQUFDLEtBQUksS0FBSyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsR0FBTSxHQUFDLENBQUMsQ0FBQztBQUM1QixhQUFLLEFBQUMsQ0FBQyxLQUFJLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLEdBQU0sRUFBQSxDQUFDLENBQUM7QUFDM0IsQUFBSSxVQUFBLENBQUEsSUFBRyxFQUFJLENBQUEsS0FBSSxLQUFLLEFBQUMsRUFBQyxDQUFDO0FBQ3ZCLGFBQUssQUFBQyxDQUFDLENBQUEsU0FBUyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUMsQ0FBQztBQUN4QixhQUFLLEFBQUMsQ0FBQyxJQUFHLFNBQVMsSUFBTSxDQUFBLEVBQUMsRUFBSSxHQUFDLENBQUEsQ0FBSSxHQUFDLENBQUMsQ0FBQztBQUN0QyxhQUFLLEFBQUMsQ0FBQyxJQUFHLE1BQU0sSUFBTSxFQUFBLENBQUMsQ0FBQztBQUN4QixhQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsSUFBTSxHQUFDLENBQUMsQ0FBQztBQUMzQixhQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsSUFBTSxHQUFDLENBQUMsQ0FBQztBQUMzQixhQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsSUFBTSxHQUFDLENBQUMsQ0FBQztBQUMzQixhQUFLLEFBQUMsQ0FBQyxJQUFHLEtBQUssQ0FBRSxDQUFBLENBQUMsSUFBTSxFQUFBLENBQUMsQ0FBQztBQUMxQixhQUFLLEFBQUMsQ0FBQyxLQUFJLFFBQVEsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNqQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNsQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNsQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLE1BQU0sQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUMvQixhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNsQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFVBQVUsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNuQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLE9BQU8sQUFBQyxFQUFDLENBQUEsR0FBTSxLQUFHLENBQUMsQ0FBQztBQUMvQixhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNsQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFNBQVMsQUFBQyxFQUFDLENBQUEsR0FBTSxLQUFHLENBQUMsQ0FBQztBQUNqQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLGVBQWUsQUFBQyxFQUFDLENBQUEsR0FBTSxLQUFHLENBQUMsQ0FBQztBQUN2QyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFdBQVcsQUFBQyxFQUFDLENBQUEsR0FBTSxLQUFHLENBQUMsQ0FBQztBQUNuQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLFVBQVUsQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztBQUNuQyxhQUFLLEFBQUMsQ0FBQyxLQUFJLE9BQU8sQUFBQyxFQUFDLENBQUEsR0FBTSxNQUFJLENBQUMsQ0FBQztNQUNwQyxDQUFDLENBQUM7QUFFRixhQUFTLFFBQU0sQ0FBRSxLQUFJLENBQUc7QUFDcEIsYUFBSyxBQUFDLENBQUMsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLGFBQUssQUFBQyxDQUFDLEtBQUksTUFBTSxBQUFDLEVBQUMsQ0FBQSxHQUFNLENBQUEsRUFBQyxFQUFJLEdBQUMsQ0FBQSxDQUFJLEdBQUMsQ0FBQSxDQUFJLEdBQUMsQ0FBQSxDQUFJLEVBQUEsQ0FBQyxDQUFDO0FBQy9DLGFBQUssQUFBQyxDQUFDLEtBQUksU0FBUyxBQUFDLEVBQUMsQ0FBQSxHQUFNLENBQUEsRUFBQyxFQUFJLEdBQUMsQ0FBQSxDQUFJLEdBQUMsQ0FBQSxDQUFJLEdBQUMsQ0FBQyxDQUFDO0FBQzlDLGFBQUssQUFBQyxDQUFDLEtBQUksS0FBSyxBQUFDLEVBQUMsQ0FBQSxHQUFNLENBQUEsSUFBRyxNQUFNLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDN0MsYUFBSyxBQUFDLENBQUMsS0FBSSxRQUFRLEFBQUMsRUFBQyxDQUFBLEdBQU0sRUFBQSxDQUFDLENBQUM7QUFDN0IsYUFBSyxBQUFDLENBQUMsS0FBSSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxHQUFNLEdBQUMsQ0FBQyxDQUFDO0FBQzVCLGFBQUssQUFBQyxDQUFDLEtBQUksS0FBSyxBQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsR0FBTSxHQUFDLENBQUMsQ0FBQztBQUM1QixhQUFLLEFBQUMsQ0FBQyxLQUFJLEtBQUssQUFBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLEdBQU0sR0FBQyxDQUFDLENBQUM7QUFDNUIsYUFBSyxBQUFDLENBQUMsS0FBSSxLQUFLLEFBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxHQUFNLEdBQUMsQ0FBQyxDQUFDO0FBQzVCLEFBQUksVUFBQSxDQUFBLElBQUcsRUFBSSxDQUFBLEtBQUksS0FBSyxBQUFDLEVBQUMsQ0FBQztBQUN2QixhQUFLLEFBQUMsQ0FBQyxDQUFBLFNBQVMsQUFBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLENBQUM7QUFDeEIsYUFBSyxBQUFDLENBQUMsSUFBRyxTQUFTLElBQU0sQ0FBQSxFQUFDLEVBQUksR0FBQyxDQUFBLENBQUksR0FBQyxDQUFBLENBQUksR0FBQyxDQUFDLENBQUM7QUFDM0MsYUFBSyxBQUFDLENBQUMsSUFBRyxNQUFNLElBQU0sRUFBQSxDQUFDLENBQUM7QUFDeEIsYUFBSyxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLElBQU0sR0FBQyxDQUFDLENBQUM7QUFDM0IsYUFBSyxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLElBQU0sR0FBQyxDQUFDLENBQUM7QUFDM0IsYUFBSyxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLElBQU0sR0FBQyxDQUFDLENBQUM7QUFDM0IsYUFBSyxBQUFDLENBQUMsSUFBRyxLQUFLLENBQUUsQ0FBQSxDQUFDLElBQU0sR0FBQyxDQUFDLENBQUM7QUFDM0IsYUFBSyxBQUFDLENBQUMsS0FBSSxRQUFRLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDakMsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbEMsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbEMsYUFBSyxBQUFDLENBQUMsS0FBSSxNQUFNLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDL0IsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbEMsYUFBSyxBQUFDLENBQUMsS0FBSSxVQUFVLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbkMsYUFBSyxBQUFDLENBQUMsS0FBSSxPQUFPLEFBQUMsRUFBQyxDQUFBLEdBQU0sS0FBRyxDQUFDLENBQUM7QUFDL0IsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbEMsYUFBSyxBQUFDLENBQUMsS0FBSSxTQUFTLEFBQUMsRUFBQyxDQUFBLEdBQU0sS0FBRyxDQUFDLENBQUM7QUFDakMsYUFBSyxBQUFDLENBQUMsS0FBSSxlQUFlLEFBQUMsRUFBQyxDQUFBLEdBQU0sS0FBRyxDQUFDLENBQUM7QUFDdkMsYUFBSyxBQUFDLENBQUMsS0FBSSxXQUFXLEFBQUMsRUFBQyxDQUFBLEdBQU0sS0FBRyxDQUFDLENBQUM7QUFDbkMsYUFBSyxBQUFDLENBQUMsS0FBSSxVQUFVLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7QUFDbkMsYUFBSyxBQUFDLENBQUMsS0FBSSxPQUFPLEFBQUMsRUFBQyxDQUFBLEdBQU0sTUFBSSxDQUFDLENBQUM7TUFDcEM7QUFBQSxBQUVBLE9BQUMsQUFBQyxDQUFDLG9DQUFtQyxDQUFHLFVBQVMsQUFBRCxDQUFHO0FBQ2hELEFBQUksVUFBQSxDQUFBLEtBQUksRUFBSSxJQUFJLFFBQU0sQUFBQyxDQUFDLEVBQUMsQ0FB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Q3hCLENBQUMsQ0FBQztBQUFBIiwiZmlsZSI6ImFmQXJyYXlUZXN0cy5qcyIsInNvdXJjZVJvb3QiOiJ0ZXN0cy9lczYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IDIwMTUgR++/vWJvciBNZXrvv70gYWthIHVuYm9ybmNoaWtrZW5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5cInVzZSBzdHJpY3RcIjtcblxubGV0IGFzc2VydCA9IHJlcXVpcmUoXCJiZXR0ZXItYXNzZXJ0XCIpO1xubGV0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xubGV0IHJlZiA9IHJlcXVpcmUoXCJyZWZcIik7XG5sZXQgQmx1ZWJpcmQgPSByZXF1aXJlKFwiYmx1ZWJpcmRcIik7XG5sZXQgYXN5bmMgPSBCbHVlYmlyZC5jb3JvdXRpbmU7XG5cbmZ1bmN0aW9uIHRlc3RQbGF0Zm9ybShpZCkge1xuICAgIGlmIChwcm9jZXNzLmVudltcIlRFU1RfXCIgKyBpZF0gPT09IFwiMVwiKSB7XG4gICAgICAgIGRlc2NyaWJlKGlkICsgXCIgcGxhdGZvcm1cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbGV0IGZpcmUgPSByZXF1aXJlKFwiLi4vLi5cIikoaWQpO1xuICAgICAgICAgICAgbGV0IEFGQXJyYXkgPSBmaXJlLkFGQXJyYXk7XG5cbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGV4cG9ydCBBRkFycmF5IGNvbnN0cnVjdG9yXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzRnVuY3Rpb24oQUZBcnJheSkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGNyZWF0ZSBlbXB0eVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBsZXQgYXJyYXkgPSBuZXcgQUZBcnJheSgpO1xuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzT2JqZWN0KGFycmF5KSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmJ5dGVzKCkgPT09IDApO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5lbGVtZW50cygpID09PSAwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNlbXB0eSgpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc0Z1bmN0aW9uKGFycmF5Lmhvc3QpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc0Z1bmN0aW9uKGFycmF5Lmhvc3RBc3luYykpO1xuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzVW5kZWZpbmVkKGFycmF5Lmhvc3RBc3luY0FzeW5jKSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNGdW5jdGlvbihhcnJheS5ob3N0U3luYykpO1xuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzVW5kZWZpbmVkKGFycmF5Lmhvc3RTeW5jQXN5bmMpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc1VuZGVmaW5lZChhcnJheS5ob3N0U3luY1N5bmMpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc1VuZGVmaW5lZChhcnJheS5ob3N0QXN5bmNTeW5jKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJzaG91bGQgZmFpbCB3aXRoIG9uZSBudW1iZXIgYXJndW1lbnRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFycmF5ID0gbmV3IEFGQXJyYXkoMSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGNyZWF0ZSBuZXcgb25lIGRpbWVuc2lvbmFsXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGxldCBhcnJheSA9IG5ldyBBRkFycmF5KDEwLCBmaXJlLnR5cGVzLmR0eXBlLnMzMik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNPYmplY3QoYXJyYXkpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuYnl0ZXMoKSA9PT0gMTAgKiA0KTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuZWxlbWVudHMoKSA9PT0gMTApO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS50eXBlKCkgPT09IGZpcmUudHlwZXMuZHR5cGUuczMyKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkubnVtZGltcygpID09PSAxKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuZGltcygwKSA9PT0gMTApO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5kaW1zKDEpID09PSAxKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuZGltcygyKSA9PT0gMSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmRpbXMoMykgPT09IDEpO1xuICAgICAgICAgICAgICAgIGxldCBkaW1zID0gYXJyYXkuZGltcygpO1xuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzT2JqZWN0KGRpbXMpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5lbGVtZW50cyA9PT0gMTApO1xuICAgICAgICAgICAgICAgIGFzc2VydChkaW1zLm5kaW1zID09PSAxKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5kaW1zWzBdID09PSAxMCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZGltc1sxXSA9PT0gMSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZGltc1syXSA9PT0gMSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZGltc1szXSA9PT0gMSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzZW1wdHkoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3NjYWxhcigpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzdmVjdG9yKCkgPT09IHRydWUpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3JvdygpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzY29sdW1uKCkgPT09IHRydWUpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2NvbXBsZXgoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3JlYWwoKSA9PT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzZG91YmxlKCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNzaW5nbGUoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3JlYWxmbG9hdGluZygpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzZmxvYXRpbmcoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2ludGVnZXIoKSA9PT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzYm9vbCgpID09PSBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJzaG91bGQgY3JlYXRlIG5ldyB0d28gZGltZW5zaW9uYWxcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFycmF5ID0gbmV3IEFGQXJyYXkoMTAsIDIwLCBmaXJlLnR5cGVzLmR0eXBlLmYzMik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNPYmplY3QoYXJyYXkpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuYnl0ZXMoKSA9PT0gMTAgKiAyMCAqIDQpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5lbGVtZW50cygpID09PSAxMCAqIDIwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkudHlwZSgpID09PSBmaXJlLnR5cGVzLmR0eXBlLmYzMik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5Lm51bWRpbXMoKSA9PT0gMik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmRpbXMoMCkgPT09IDEwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuZGltcygxKSA9PT0gMjApO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5kaW1zKDIpID09PSAxKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuZGltcygzKSA9PT0gMSk7XG4gICAgICAgICAgICAgICAgbGV0IGRpbXMgPSBhcnJheS5kaW1zKCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNPYmplY3QoZGltcykpO1xuICAgICAgICAgICAgICAgIGFzc2VydChkaW1zLmVsZW1lbnRzID09PSAxMCAqIDIwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5uZGltcyA9PT0gMik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZGltc1swXSA9PT0gMTApO1xuICAgICAgICAgICAgICAgIGFzc2VydChkaW1zLmRpbXNbMV0gPT09IDIwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5kaW1zWzJdID09PSAxKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5kaW1zWzNdID09PSAxKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNlbXB0eSgpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5Lmlzc2NhbGFyKCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXN2ZWN0b3IoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3JvdygpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzY29sdW1uKCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNjb21wbGV4KCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNyZWFsKCkgPT09IHRydWUpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2RvdWJsZSgpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5Lmlzc2luZ2xlKCkgPT09IHRydWUpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3JlYWxmbG9hdGluZygpID09PSB0cnVlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNmbG9hdGluZygpID09PSB0cnVlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNpbnRlZ2VyKCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNib29sKCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcInNob3VsZCBjcmVhdGUgbmV3IHRocmVlIGRpbWVuc2lvbmFsXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGxldCBhcnJheSA9IG5ldyBBRkFycmF5KDEwLCAyMCwgMzAsIGZpcmUudHlwZXMuZHR5cGUuZjMyKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc09iamVjdChhcnJheSkpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5ieXRlcygpID09PSAxMCAqIDIwICogMzAgKiA0KTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuZWxlbWVudHMoKSA9PT0gMTAgKiAyMCAqIDMwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkudHlwZSgpID09PSBmaXJlLnR5cGVzLmR0eXBlLmYzMik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5Lm51bWRpbXMoKSA9PT0gMyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmRpbXMoMCkgPT09IDEwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuZGltcygxKSA9PT0gMjApO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5kaW1zKDIpID09PSAzMCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmRpbXMoMykgPT09IDEpO1xuICAgICAgICAgICAgICAgIGxldCBkaW1zID0gYXJyYXkuZGltcygpO1xuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzT2JqZWN0KGRpbXMpKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5lbGVtZW50cyA9PT0gMTAgKiAyMCAqIDMwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5uZGltcyA9PT0gMyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZGltc1swXSA9PT0gMTApO1xuICAgICAgICAgICAgICAgIGFzc2VydChkaW1zLmRpbXNbMV0gPT09IDIwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5kaW1zWzJdID09PSAzMCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZGltc1szXSA9PT0gMSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzZW1wdHkoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3NjYWxhcigpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzdmVjdG9yKCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNyb3coKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2NvbHVtbigpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzY29tcGxleCgpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzcmVhbCgpID09PSB0cnVlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNkb3VibGUoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3NpbmdsZSgpID09PSB0cnVlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNyZWFsZmxvYXRpbmcoKSA9PT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzZmxvYXRpbmcoKSA9PT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzaW50ZWdlcigpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzYm9vbCgpID09PSBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdmVyaWZ5NChhcnJheSkge1xuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzT2JqZWN0KGFycmF5KSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmJ5dGVzKCkgPT09IDEwICogMjAgKiAzMCAqIDQwICogNCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmVsZW1lbnRzKCkgPT09IDEwICogMjAgKiAzMCAqIDQwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkudHlwZSgpID09PSBmaXJlLnR5cGVzLmR0eXBlLmYzMik7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5Lm51bWRpbXMoKSA9PT0gNCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmRpbXMoMCkgPT09IDEwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuZGltcygxKSA9PT0gMjApO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5kaW1zKDIpID09PSAzMCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmRpbXMoMykgPT09IDQwKTtcbiAgICAgICAgICAgICAgICBsZXQgZGltcyA9IGFycmF5LmRpbXMoKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc09iamVjdChkaW1zKSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZWxlbWVudHMgPT09IDEwICogMjAgKiAzMCAqIDQwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5uZGltcyA9PT0gNCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZGltc1swXSA9PT0gMTApO1xuICAgICAgICAgICAgICAgIGFzc2VydChkaW1zLmRpbXNbMV0gPT09IDIwKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGltcy5kaW1zWzJdID09PSAzMCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGRpbXMuZGltc1szXSA9PT0gNDApO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2VtcHR5KCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNzY2FsYXIoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3ZlY3RvcigpID09PSBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5Lmlzcm93KCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNjb2x1bW4oKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2NvbXBsZXgoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc3JlYWwoKSA9PT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzZG91YmxlKCkgPT09IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuaXNzaW5nbGUoKSA9PT0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmlzcmVhbGZsb2F0aW5nKCkgPT09IHRydWUpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2Zsb2F0aW5nKCkgPT09IHRydWUpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2ludGVnZXIoKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheS5pc2Jvb2woKSA9PT0gZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpdChcInNob3VsZCBjcmVhdGUgbmV3IGZvdXIgZGltZW5zaW9uYWxcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFycmF5ID0gbmV3IEFGQXJyYXkoMTAsIDIwLCAzMCwgNDAsIGZpcmUudHlwZXMuZHR5cGUuZjMyKTtcbiAgICAgICAgICAgICAgICB2ZXJpZnk0KGFycmF5KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcInNob3VsZCBjcmVhdGUgbmV3IGZvdXIgZGltZW5zaW9uYWwgZnJvbSBkaW00XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGxldCBhcnJheSA9IG5ldyBBRkFycmF5KHsgZGltczogWzEwLCAyMCwgMzAsIDQwXSB9LCBmaXJlLnR5cGVzLmR0eXBlLmYzMik7XG4gICAgICAgICAgICAgICAgdmVyaWZ5NChhcnJheSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJzaG91bGQgY3JlYXRlIG5ldyBmb3VyIGRpbWVuc2lvbmFsIGZyb20gZGltNCBhcnJheVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBsZXQgYXJyYXkgPSBuZXcgQUZBcnJheShbMTAsIDIwLCAzMCwgNDBdLCBmaXJlLnR5cGVzLmR0eXBlLmYzMik7XG4gICAgICAgICAgICAgICAgdmVyaWZ5NChhcnJheSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJzaG91bGQgaW5pdGlhbGl6ZSBmcm9tIGJ1ZmZlciwgY29weWFibGUsIGFuZCByZWFkYWJsZSAtIGFzeW5jaHJvbm91c2x5IHcvIGdlbmVyYXRvcnNcIiwgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICAgICAgICAgIGxldCBmID0gYXN5bmMoZnVuY3Rpb24qKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW50ID0gcmVmLnR5cGVzLmludDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1ZmYgPSBuZXcgQnVmZmVyKGludC5zaXplICogY291bnQpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB2ID0gMDsgdiA8IGNvdW50OyB2KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludC5zZXQoYnVmZiwgdiAqIGludC5zaXplLCB2ICogdik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc0Z1bmN0aW9uKEFGQXJyYXkuY3JlYXRlKSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChfLmlzRnVuY3Rpb24oQUZBcnJheS5jcmVhdGVBc3luYykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBhcnJheSA9IHlpZWxkIEFGQXJyYXkuY3JlYXRlQXN5bmMoY291bnQsIGZpcmUudHlwZXMuZHR5cGUuczMyLCBidWZmKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LmJ5dGVzKCkgPT09IGNvdW50ICogaW50LnNpemUpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkudHlwZSgpID09PSBmaXJlLnR5cGVzLmR0eXBlLnMzMik7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1ZmYyID0gbmV3IEJ1ZmZlcihpbnQuc2l6ZSAqIGNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgYXJyYXkuaG9zdEFzeW5jKGJ1ZmYyKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPCBjb3VudDsgdisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSBpbnQuZ2V0KGJ1ZmYsIHYgKiBpbnQuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSBpbnQuZ2V0KGJ1ZmYyLCB2ICogaW50LnNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KHYxID09PSB2Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQodjEgPT09IHYgKiB2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGxldCBhcnJheTIgPSBhcnJheS5jb3B5KCk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChhcnJheTIgaW5zdGFuY2VvZiBBRkFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5Mi5ieXRlcygpID09PSBhcnJheS5ieXRlcygpKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJ1ZmYzID0geWllbGQgYXJyYXkyLmhvc3RBc3luYygpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoYnVmZjMgaW5zdGFuY2VvZiBCdWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoYnVmZjMubGVuZ3RoID09PSBpbnQuc2l6ZSAqIGNvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPCBjb3VudDsgdisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjEgPSBpbnQuZ2V0KGJ1ZmYsIHYgKiBpbnQuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSBpbnQuZ2V0KGJ1ZmYzLCB2ICogaW50LnNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KHYxID09PSB2Mik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQodjEgPT09IHYgKiB2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGYoKS5ub2RlaWZ5KGRvbmUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGluaXRpYWxpemUgZnJvbSBidWZmZXIsIGNvcHlhYmxlLCBhbmQgcmVhZGFibGUgLSBzeW5jaHJvbm91c2x5IChibG9ja2luZylcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbGV0IGludCA9IHJlZi50eXBlcy5pbnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSAxMDtcbiAgICAgICAgICAgICAgICBsZXQgYnVmZiA9IG5ldyBCdWZmZXIoaW50LnNpemUgKiBjb3VudCk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPCBjb3VudDsgdisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGludC5zZXQoYnVmZiwgdiAqIGludC5zaXplLCB2ICogdik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNGdW5jdGlvbihBRkFycmF5LmNyZWF0ZSkpO1xuICAgICAgICAgICAgICAgIGFzc2VydChfLmlzRnVuY3Rpb24oQUZBcnJheS5jcmVhdGVTeW5jKSk7XG5cbiAgICAgICAgICAgICAgICBsZXQgYXJyYXkgPSBBRkFycmF5LmNyZWF0ZVN5bmMoY291bnQsIGZpcmUudHlwZXMuZHR5cGUuczMyLCBidWZmKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYXJyYXkuYnl0ZXMoKSA9PT0gY291bnQgKiBpbnQuc2l6ZSk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5LnR5cGUoKSA9PT0gZmlyZS50eXBlcy5kdHlwZS5zMzIpO1xuXG4gICAgICAgICAgICAgICAgbGV0IGJ1ZmYyID0gbmV3IEJ1ZmZlcihpbnQuc2l6ZSAqIGNvdW50KTtcbiAgICAgICAgICAgICAgICBhcnJheS5ob3N0U3luYyhidWZmMik7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPCBjb3VudDsgdisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB2MSA9IGludC5nZXQoYnVmZiwgdiAqIGludC5zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYyID0gaW50LmdldChidWZmMiwgdiAqIGludC5zaXplKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KHYxID09PSB2Mik7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydCh2MSA9PT0gdiAqIHYpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBhcnJheTIgPSBhcnJheS5jb3B5KCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFycmF5MiBpbnN0YW5jZW9mIEFGQXJyYXkpO1xuICAgICAgICAgICAgICAgIGFzc2VydChhcnJheTIuYnl0ZXMoKSA9PT0gYXJyYXkuYnl0ZXMoKSk7XG4gICAgICAgICAgICAgICAgbGV0IGJ1ZmYzID0gYXJyYXkyLmhvc3RTeW5jKCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGJ1ZmYzIGluc3RhbmNlb2YgQnVmZmVyKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoYnVmZjMubGVuZ3RoID09PSBpbnQuc2l6ZSAqIGNvdW50KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB2ID0gMDsgdiA8IGNvdW50OyB2KyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYxID0gaW50LmdldChidWZmLCB2ICogaW50LnNpemUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdjIgPSBpbnQuZ2V0KGJ1ZmYzLCB2ICogaW50LnNpemUpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQodjEgPT09IHYyKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KHYxID09PSB2ICogdik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGJlIHRlc3RzIGZvciBhc3NpZ25tZW50IG9wZXJhdG9yc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVE9ETzogaW1wbGVtZW50IGFycmF5IGFzc2lnbm1lbnQgb3BlcmF0b3IgdGVzdHMgZm9yICR7aWR9XFxuYCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJzaG91bGQgYmUgdGVzdHMgZm9yIGluZGV4aW5nIG9wZXJhdG9yc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVE9ETzogaW1wbGVtZW50IGFycmF5IGluZGV4aW5nIG9wZXJhdG9yIHRlc3RzIGZvciAke2lkfVxcbmApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGJlIHRlc3RzIGZvciByb3dcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFRPRE86IGltcGxlbWVudCBhcnJheSByb3cgdGVzdCBmb3IgJHtpZH1cXG5gKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcInNob3VsZCBiZSB0ZXN0cyBmb3IgY29sXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUT0RPOiBpbXBsZW1lbnQgYXJyYXkgY29sIHRlc3QgZm9yICR7aWR9XFxuYCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJzaG91bGQgYmUgdGVzdHMgZm9yIHNsaWNlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUT0RPOiBpbXBsZW1lbnQgYXJyYXkgc2xpY2UgdGVzdCBmb3IgJHtpZH1cXG5gKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcInNob3VsZCBiZSB0ZXN0cyBmb3Igcm93c1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVE9ETzogaW1wbGVtZW50IGFycmF5IHJvd3MgdGVzdCBmb3IgJHtpZH1cXG5gKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcInNob3VsZCBiZSB0ZXN0cyBmb3IgY29sc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVE9ETzogaW1wbGVtZW50IGFycmF5IGNvbHMgdGVzdCBmb3IgJHtpZH1cXG5gKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcInNob3VsZCBiZSB0ZXN0cyBmb3Igc2xpY2VzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUT0RPOiBpbXBsZW1lbnQgYXJyYXkgc2xpY2VzIHRlc3QgZm9yICR7aWR9XFxuYCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJzaG91bGQgYmUgdGVzdHMgZm9yIGFzXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUT0RPOiBpbXBsZW1lbnQgYXJyYXkgYXMgdGVzdCBmb3IgJHtpZH1cXG5gKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdChcInNob3VsZCBiZSB0ZXN0cyBmb3IgYXJpdGhtZXRpYyBvcGVyYXRvcnNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFRPRE86IGltcGxlbWVudCBhcnJheSBhcml0aG1ldGljIG9wZXJhdG9yIHRlc3RzIGZvciAke2lkfVxcbmApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGJlIHRlc3RzIGZvciBsb2dpY2FsIG9wZXJhdG9yc1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVE9ETzogaW1wbGVtZW50IGFycmF5IGxvZ2ljYWwgb3BlcmF0b3IgdGVzdHMgZm9yICR7aWR9XFxuYCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5kZXNjcmliZShcIkFGQXJyYXkgY2xhc3MgYW5kIG1ldGhvZHNcIiwgZnVuY3Rpb24oKSB7XG4gICAgdGVzdFBsYXRmb3JtKFwiQ1BVXCIpO1xuICAgIHRlc3RQbGF0Zm9ybShcIk9wZW5DTFwiKTtcbiAgICB0ZXN0UGxhdGZvcm0oXCJDVURBXCIpO1xufSk7Il19
