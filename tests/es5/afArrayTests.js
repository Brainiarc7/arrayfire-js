"use strict";
"use strict";
var assert = require("better-assert");
var _ = require("lodash");
var ref = require("ref");
var Bluebird = require("bluebird");
var async = Bluebird.coroutine;
function testPlatform(id) {
  if (process.env["TEST_" + id] === "1") {
    describe(id + " platform", function() {
      var af = Bluebird.promisifyAll(require("../..")(id));
      var AFArray = af.AFArray;
      it("should export AFArray constructor", function() {
        assert(_.isFunction(AFArray));
      });
      it("should create empty", function() {
        var array = new AFArray();
        assert(_.isObject(array));
        assert(array.bytes() === 0);
        assert(array.elements() === 0);
        assert(array.isempty());
      });
      it("should fail with one number argument", function() {
        try {
          var array = new AFArray(1);
          assert(false);
        } catch (e) {}
      });
      it("should create new one dimensional", function() {
        var array = new AFArray(10, af.types.dtype.s32);
        assert(_.isObject(array));
        assert(array.bytes() === 10 * 4);
        assert(array.elements() === 10);
        assert(array.type() === af.types.dtype.s32);
        assert(array.numdims() === 1);
        assert(array.dims(0) === 10);
        assert(array.dims(1) === 1);
        assert(array.dims(2) === 1);
        assert(array.dims(3) === 1);
        var dims = array.dims();
        assert(_.isObject(dims));
        assert(dims.elements === 10);
        assert(dims.ndims === 1);
        assert(dims.dim0 === 10);
        assert(dims.dim1 === 1);
        assert(dims.dim2 === 1);
        assert(dims.dim3 === 1);
        assert(array.isempty() === false);
        assert(array.isscalar() === false);
        assert(array.isvector() === true);
        assert(array.isrow() === false);
        assert(array.iscolumn() === true);
        assert(array.iscomplex() === false);
        assert(array.isreal() === true);
        assert(array.isdouble() === false);
        assert(array.issingle() === false);
        assert(array.isrealfloating() === false);
        assert(array.isfloating() === false);
        assert(array.isinteger() === true);
        assert(array.isbool() === false);
      });
      it("should create new two dimensional", function() {
        var array = new AFArray(10, 20, af.types.dtype.f32);
        assert(_.isObject(array));
        assert(array.bytes() === 10 * 20 * 4);
        assert(array.elements() === 10 * 20);
        assert(array.type() === af.types.dtype.f32);
        assert(array.numdims() === 2);
        assert(array.dims(0) === 10);
        assert(array.dims(1) === 20);
        assert(array.dims(2) === 1);
        assert(array.dims(3) === 1);
        var dims = array.dims();
        assert(_.isObject(dims));
        assert(dims.elements === 10 * 20);
        assert(dims.ndims === 2);
        assert(dims.dim0 === 10);
        assert(dims.dim1 === 20);
        assert(dims.dim2 === 1);
        assert(dims.dim3 === 1);
        assert(array.isempty() === false);
        assert(array.isscalar() === false);
        assert(array.isvector() === false);
        assert(array.isrow() === false);
        assert(array.iscolumn() === false);
        assert(array.iscomplex() === false);
        assert(array.isreal() === true);
        assert(array.isdouble() === false);
        assert(array.issingle() === true);
        assert(array.isrealfloating() === true);
        assert(array.isfloating() === true);
        assert(array.isinteger() === false);
        assert(array.isbool() === false);
      });
      it("should create new three dimensional", function() {
        var array = new AFArray(10, 20, 30, af.types.dtype.f32);
        assert(_.isObject(array));
        assert(array.bytes() === 10 * 20 * 30 * 4);
        assert(array.elements() === 10 * 20 * 30);
        assert(array.type() === af.types.dtype.f32);
        assert(array.numdims() === 3);
        assert(array.dims(0) === 10);
        assert(array.dims(1) === 20);
        assert(array.dims(2) === 30);
        assert(array.dims(3) === 1);
        var dims = array.dims();
        assert(_.isObject(dims));
        assert(dims.elements === 10 * 20 * 30);
        assert(dims.ndims === 3);
        assert(dims.dim0 === 10);
        assert(dims.dim1 === 20);
        assert(dims.dim2 === 30);
        assert(dims.dim3 === 1);
        assert(array.isempty() === false);
        assert(array.isscalar() === false);
        assert(array.isvector() === false);
        assert(array.isrow() === false);
        assert(array.iscolumn() === false);
        assert(array.iscomplex() === false);
        assert(array.isreal() === true);
        assert(array.isdouble() === false);
        assert(array.issingle() === true);
        assert(array.isrealfloating() === true);
        assert(array.isfloating() === true);
        assert(array.isinteger() === false);
        assert(array.isbool() === false);
      });
      it("should create new four dimensional", function() {
        var array = new AFArray(10, 20, 30, 40, af.types.dtype.f32);
        assert(_.isObject(array));
        assert(array.bytes() === 10 * 20 * 30 * 40 * 4);
        assert(array.elements() === 10 * 20 * 30 * 40);
        assert(array.type() === af.types.dtype.f32);
        assert(array.numdims() === 4);
        assert(array.dims(0) === 10);
        assert(array.dims(1) === 20);
        assert(array.dims(2) === 30);
        assert(array.dims(3) === 40);
        var dims = array.dims();
        assert(_.isObject(dims));
        assert(dims.elements === 10 * 20 * 30 * 40);
        assert(dims.ndims === 4);
        assert(dims.dim0 === 10);
        assert(dims.dim1 === 20);
        assert(dims.dim2 === 30);
        assert(dims.dim3 === 40);
        assert(array.isempty() === false);
        assert(array.isscalar() === false);
        assert(array.isvector() === false);
        assert(array.isrow() === false);
        assert(array.iscolumn() === false);
        assert(array.iscomplex() === false);
        assert(array.isreal() === true);
        assert(array.isdouble() === false);
        assert(array.issingle() === true);
        assert(array.isrealfloating() === true);
        assert(array.isfloating() === true);
        assert(array.isinteger() === false);
        assert(array.isbool() === false);
      });
      it("should initialize from buffer, copyable, and readable", function(done) {
        var f = async($traceurRuntime.initGeneratorFunction(function $__4() {
          var int,
              count,
              buff,
              v,
              array,
              buff2,
              v$__0,
              v1,
              v2,
              array2,
              buff3,
              v$__1,
              v1$__2,
              v2$__3;
          return $traceurRuntime.createGeneratorInstance(function($ctx) {
            while (true)
              switch ($ctx.state) {
                case 0:
                  int = ref.types.int;
                  count = 10;
                  buff = new Buffer(int.size * count);
                  for (v = 0; v < count; v++) {
                    int.set(buff, v * int.size, v * v);
                  }
                  assert(_.isFunction(AFArray.create));
                  assert(_.isFunction(AFArray.createAsync));
                  $ctx.state = 14;
                  break;
                case 14:
                  $ctx.state = 2;
                  return AFArray.createAsync(count, buff, af.types.dtype.s32);
                case 2:
                  array = $ctx.sent;
                  $ctx.state = 4;
                  break;
                case 4:
                  assert(array.bytes() === count * int.size);
                  assert(array.type() === af.types.dtype.s32);
                  buff2 = new Buffer(int.size * count);
                  $ctx.state = 16;
                  break;
                case 16:
                  $ctx.state = 6;
                  return array.hostAsync(buff2);
                case 6:
                  $ctx.maybeThrow();
                  $ctx.state = 8;
                  break;
                case 8:
                  for (v$__0 = 0; v$__0 < count; v$__0++) {
                    v1 = int.get(buff, v$__0 * int.size);
                    v2 = int.get(buff2, v$__0 * int.size);
                    assert(v1 === v2);
                  }
                  array2 = array.copy();
                  assert(array2 instanceof AFArray);
                  assert(array2.bytes() === array.bytes());
                  buff3 = new Buffer(int.size * count);
                  $ctx.state = 18;
                  break;
                case 18:
                  $ctx.state = 10;
                  return array2.hostAsync(buff3);
                case 10:
                  $ctx.maybeThrow();
                  $ctx.state = 12;
                  break;
                case 12:
                  for (v$__1 = 0; v$__1 < count; v$__1++) {
                    v1$__2 = int.get(buff, v$__1 * int.size);
                    v2$__3 = int.get(buff3, v$__1 * int.size);
                    assert(v1$__2 === v2$__3);
                  }
                  $ctx.state = -2;
                  break;
                default:
                  return $ctx.end();
              }
          }, $__4, this);
        }));
        f().nodeify(done);
      });
    });
  }
}
describe("AFArray class and methods", function() {
  testPlatform("CPU");
  testPlatform("OpenCL");
  testPlatform("CUDA");
});
//# sourceMappingURL=data:application/json;base64,
