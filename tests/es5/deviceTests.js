"use strict";
var assert = require("better-assert");
var _ = require("lodash");
var Bluebird = require("bluebird");
function testPlatform(id) {
  if (process.env["TEST_" + id] === "1") {
    describe(id + " platform", function() {
      var af = require("../..")(id);
      it("should return available devices", function() {
        var deviceCount = af.getDeviceCount();
        assert(deviceCount > 0);
        var infos = af.getDevices();
        assert(_.isArray(infos));
        assert(infos.length === deviceCount);
        var $__3 = true;
        var $__4 = false;
        var $__5 = undefined;
        try {
          for (var $__1 = void 0,
              $__0 = (infos)[$traceurRuntime.toProperty(Symbol.iterator)](); !($__3 = ($__1 = $__0.next()).done); $__3 = true) {
            var info = $__1.value;
            {
              assert(_.isString(info.name) && info.name);
              assert(_.isString(info.platform) && info.platform);
              assert(_.isString(info.compute) && info.compute);
              assert(_.isBoolean(info.isDoubleAvailable));
            }
          }
        } catch ($__6) {
          $__4 = true;
          $__5 = $__6;
        } finally {
          try {
            if (!$__3 && $__0.return != null) {
              $__0.return();
            }
          } finally {
            if ($__4) {
              throw $__5;
            }
          }
        }
      });
      it("should do sync with callback", function(done) {
        af.sync(done);
      });
      it("should do sync with promise", function(done) {
        af.syncAsync().nodeify(done);
      });
      it("sync should failed if device is out of range", function(done) {
        af.syncAsync(100).then(function() {
          done(new Error("This should fail!"));
        }, function() {
          done();
        });
      });
    });
  }
}
describe("device methods", function() {
  testPlatform("CPU");
  testPlatform("OpenCL");
  testPlatform("CUDA");
});
//# sourceMappingURL=data:application/json;base64,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LDhCQUE2QixDQUFHLFVBQVMsSUFBRyxDQUFHO0FBQzlDLFNBQUMsS0FBSyxBQUFDLENBQUMsSUFBRyxDQUFDLENBQUM7TUFDakIsQ0FBQyxDQUFDO0FBRUYsT0FBQyxBQUFDLENBQUMsNkJBQTRCLENBQUcsVUFBUyxJQUFHLENBQUc7QUFDN0MsU0FBQyxVQUFVLEFBQUMsRUFBQyxRQUFRLEFBQUMsQ0FBQyxJQUFHLENBQUMsQ0FBQztNQUNoQyxDQUFDLENBQUM7QUFFRixPQUFDLEFBQUMsQ0FBQyw4Q0FBNkMsQ0FBRyxVQUFTLElBQUcsQ0FBRztBQUM5RCxTQUFDLFVBQVUsQUFBQyxDQUFDLEdBQUUsQ0FBQyxLQUNSLEFBQUMsQ0FBQyxTQUFTLEFBQUQsQ0FBRztBQUNiLGFBQUcsQUFBQyxDQUFDLEdBQUksTUFBSSxBQUFDLENBQUMsbUJBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQ0EsVUFBUyxBQUFELENBQUc7QUFDUCxhQUFHLEFBQUMsRUFBQyxDQUFDO1FBQ1YsQ0FBQyxDQUFDO01BQ1YsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0VBQ047QUFBQSxBQUNKO0FBRUEsT0FBTyxBQUFDLENBQUMsZ0JBQWUsQ0FBRyxVQUFTLEFBQUQsQ0FBRztBQUNsQyxhQUFXLEFBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQztBQUNuQixhQUFXLEFBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQztBQUN0QixhQUFXLEFBQUMsQ0FBQyxNQUFLLENBQUMsQ0FBQztBQUN4QixDQUFDLENBQUM7QUFDRiIsImZpbGUiOiJkZXZpY2VUZXN0cy5qcyIsInNvdXJjZVJvb3QiOiJ0ZXN0cy9lczYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEFycmF5RmlyZVxuQ29weXJpZ2h0IChjKSAyMDE1IEfDoWJvciBNZXrFkSBha2EgdW5ib3JuY2hpa2tlbiAoZ2Fib3IubWV6b0BvdXRsb29rLmNvbSlcbkFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cblJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sXG5hcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cblxuICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vclxuICBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBBcnJheUZpcmUgbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbiAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG5BTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1JcbkFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OXG5BTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcblNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBhc3NlcnQgPSByZXF1aXJlKFwiYmV0dGVyLWFzc2VydFwiKTtcbmxldCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcbmxldCBCbHVlYmlyZCA9IHJlcXVpcmUoXCJibHVlYmlyZFwiKTtcblxuZnVuY3Rpb24gdGVzdFBsYXRmb3JtKGlkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52W1wiVEVTVF9cIiArIGlkXSA9PT0gXCIxXCIpIHtcbiAgICAgICAgZGVzY3JpYmUoaWQgKyBcIiBwbGF0Zm9ybVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgYWYgPSByZXF1aXJlKFwiLi4vLi5cIikoaWQpO1xuXG4gICAgICAgICAgICBpdChcInNob3VsZCByZXR1cm4gYXZhaWxhYmxlIGRldmljZXNcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRldmljZUNvdW50ID0gYWYuZ2V0RGV2aWNlQ291bnQoKTtcbiAgICAgICAgICAgICAgICBhc3NlcnQoZGV2aWNlQ291bnQgPiAwKTtcbiAgICAgICAgICAgICAgICBsZXQgaW5mb3MgPSBhZi5nZXREZXZpY2VzKCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNBcnJheShpbmZvcykpO1xuICAgICAgICAgICAgICAgIGFzc2VydChpbmZvcy5sZW5ndGggPT09IGRldmljZUNvdW50KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmZvIG9mIGluZm9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChfLmlzU3RyaW5nKGluZm8ubmFtZSkgJiYgaW5mby5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNTdHJpbmcoaW5mby5wbGF0Zm9ybSkgJiYgaW5mby5wbGF0Zm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChfLmlzU3RyaW5nKGluZm8uY29tcHV0ZSkgJiYgaW5mby5jb21wdXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNCb29sZWFuKGluZm8uaXNEb3VibGVBdmFpbGFibGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaXQoXCJzaG91bGQgZG8gc3luYyB3aXRoIGNhbGxiYWNrXCIsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgICAgICAgICBhZi5zeW5jKGRvbmUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwic2hvdWxkIGRvIHN5bmMgd2l0aCBwcm9taXNlXCIsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgICAgICAgICBhZi5zeW5jQXN5bmMoKS5ub2RlaWZ5KGRvbmUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KFwic3luYyBzaG91bGQgZmFpbGVkIGlmIGRldmljZSBpcyBvdXQgb2YgcmFuZ2VcIiwgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICAgICAgICAgIGFmLnN5bmNBc3luYygxMDApXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZShuZXcgRXJyb3IoXCJUaGlzIHNob3VsZCBmYWlsIVwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmRlc2NyaWJlKFwiZGV2aWNlIG1ldGhvZHNcIiwgZnVuY3Rpb24oKSB7XG4gICAgdGVzdFBsYXRmb3JtKFwiQ1BVXCIpO1xuICAgIHRlc3RQbGF0Zm9ybShcIk9wZW5DTFwiKTtcbiAgICB0ZXN0UGxhdGZvcm0oXCJDVURBXCIpO1xufSk7XG4iXX0=
